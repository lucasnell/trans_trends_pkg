/*
    TransTrendsPkg is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    TransTrendsPkg is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with TransTrendsPkg.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace model_armm_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_armm");
    reader.add_event(92, 90, "end", "model_armm");
    return reader;
}

class model_armm
  : public stan::model::model_base_crtp<model_armm> {
private:
        int n_obs;
        int n_ts;
        std::vector<int> obs_per;
        int n_coef;
        std::vector<int> g_per_ff;
        std::vector<int> lev_per_g;
        std::vector<std::vector<int> > b_groups;
        std::vector<int> p_groups;
        int change;
        std::vector<double> y;
        std::vector<std::vector<double> > x;
        std::vector<double> time;
        double p_bound;
public:
    model_armm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_armm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_armm_namespace::model_armm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec());
            n_obs = int(0);
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            n_obs = vals_i__[pos__++];

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_ts", "int", context__.to_vec());
            n_ts = int(0);
            vals_i__ = context__.vals_i("n_ts");
            pos__ = 0;
            n_ts = vals_i__[pos__++];

            current_statement_begin__ = 5;
            validate_non_negative_index("obs_per", "n_ts", n_ts);
            context__.validate_dims("data initialization", "obs_per", "int", context__.to_vec(n_ts));
            obs_per = std::vector<int>(n_ts, int(0));
            vals_i__ = context__.vals_i("obs_per");
            pos__ = 0;
            size_t obs_per_k_0_max__ = n_ts;
            for (size_t k_0__ = 0; k_0__ < obs_per_k_0_max__; ++k_0__) {
                obs_per[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_coef", "int", context__.to_vec());
            n_coef = int(0);
            vals_i__ = context__.vals_i("n_coef");
            pos__ = 0;
            n_coef = vals_i__[pos__++];

            current_statement_begin__ = 7;
            validate_non_negative_index("g_per_ff", "n_coef", n_coef);
            context__.validate_dims("data initialization", "g_per_ff", "int", context__.to_vec(n_coef));
            g_per_ff = std::vector<int>(n_coef, int(0));
            vals_i__ = context__.vals_i("g_per_ff");
            pos__ = 0;
            size_t g_per_ff_k_0_max__ = n_coef;
            for (size_t k_0__ = 0; k_0__ < g_per_ff_k_0_max__; ++k_0__) {
                g_per_ff[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 8;
            validate_non_negative_index("lev_per_g", "sum(g_per_ff)", sum(g_per_ff));
            context__.validate_dims("data initialization", "lev_per_g", "int", context__.to_vec(sum(g_per_ff)));
            lev_per_g = std::vector<int>(sum(g_per_ff), int(0));
            vals_i__ = context__.vals_i("lev_per_g");
            pos__ = 0;
            size_t lev_per_g_k_0_max__ = sum(g_per_ff);
            for (size_t k_0__ = 0; k_0__ < lev_per_g_k_0_max__; ++k_0__) {
                lev_per_g[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("b_groups", "n_ts", n_ts);
            validate_non_negative_index("b_groups", "sum(g_per_ff)", sum(g_per_ff));
            context__.validate_dims("data initialization", "b_groups", "int", context__.to_vec(n_ts,sum(g_per_ff)));
            b_groups = std::vector<std::vector<int> >(n_ts, std::vector<int>(sum(g_per_ff), int(0)));
            vals_i__ = context__.vals_i("b_groups");
            pos__ = 0;
            size_t b_groups_k_0_max__ = n_ts;
            size_t b_groups_k_1_max__ = sum(g_per_ff);
            for (size_t k_1__ = 0; k_1__ < b_groups_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < b_groups_k_0_max__; ++k_0__) {
                    b_groups[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("p_groups", "n_ts", n_ts);
            context__.validate_dims("data initialization", "p_groups", "int", context__.to_vec(n_ts));
            p_groups = std::vector<int>(n_ts, int(0));
            vals_i__ = context__.vals_i("p_groups");
            pos__ = 0;
            size_t p_groups_k_0_max__ = n_ts;
            for (size_t k_0__ = 0; k_0__ < p_groups_k_0_max__; ++k_0__) {
                p_groups[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "change", "int", context__.to_vec());
            change = int(0);
            vals_i__ = context__.vals_i("change");
            pos__ = 0;
            change = vals_i__[pos__++];
            check_greater_or_equal(function__, "change", change, 0);
            check_less_or_equal(function__, "change", change, 1);

            current_statement_begin__ = 13;
            validate_non_negative_index("y", "n_obs", n_obs);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(n_obs));
            y = std::vector<double>(n_obs, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 14;
            validate_non_negative_index("x", "n_obs", n_obs);
            validate_non_negative_index("x", "n_coef", n_coef);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(n_obs,n_coef));
            x = std::vector<std::vector<double> >(n_obs, std::vector<double>(n_coef, double(0)));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_k_0_max__ = n_obs;
            size_t x_k_1_max__ = n_coef;
            for (size_t k_1__ = 0; k_1__ < x_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    x[k_0__][k_1__] = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 15;
            validate_non_negative_index("time", "n_obs", n_obs);
            context__.validate_dims("data initialization", "time", "double", context__.to_vec(n_obs));
            time = std::vector<double>(n_obs, double(0));
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < time_k_0_max__; ++k_0__) {
                time[k_0__] = vals_r__[pos__++];
            }
            size_t time_i_0_max__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < time_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "time[i_0__]", time[i_0__], 0);
            }

            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "p_bound", "double", context__.to_vec());
            p_bound = double(0);
            vals_r__ = context__.vals_r("p_bound");
            pos__ = 0;
            p_bound = vals_r__[pos__++];
            check_greater_or_equal(function__, "p_bound", p_bound, 0);


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 19;
            validate_non_negative_index("alpha", "n_coef", n_coef);
            num_params_r__ += (1 * n_coef);
            current_statement_begin__ = 20;
            validate_non_negative_index("z", "sum(lev_per_g)", sum(lev_per_g));
            num_params_r__ += (1 * sum(lev_per_g));
            current_statement_begin__ = 22;
            validate_non_negative_index("phi", "max(p_groups)", max(p_groups));
            num_params_r__ += (1 * max(p_groups));
            current_statement_begin__ = 23;
            validate_non_negative_index("sig_beta", "sum(g_per_ff)", sum(g_per_ff));
            num_params_r__ += (1 * sum(g_per_ff));
            current_statement_begin__ = 24;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_armm() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 19;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "n_coef", n_coef);
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec(n_coef));
        std::vector<double> alpha(n_coef, double(0));
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = n_coef;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 20;
        if (!(context__.contains_r("z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "sum(lev_per_g)", sum(lev_per_g));
        context__.validate_dims("parameter initialization", "z", "double", context__.to_vec(sum(lev_per_g)));
        std::vector<double> z(sum(lev_per_g), double(0));
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            z[k_0__] = vals_r__[pos__++];
        }
        size_t z_i_0_max__ = sum(lev_per_g);
        for (size_t i_0__ = 0; i_0__ < z_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(z[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 22;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "max(p_groups)", max(p_groups));
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec(max(p_groups)));
        std::vector<double> phi(max(p_groups), double(0));
        size_t phi_k_0_max__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = max(p_groups);
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 23;
        if (!(context__.contains_r("sig_beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sig_beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sig_beta");
        pos__ = 0U;
        validate_non_negative_index("sig_beta", "sum(g_per_ff)", sum(g_per_ff));
        context__.validate_dims("parameter initialization", "sig_beta", "double", context__.to_vec(sum(g_per_ff)));
        std::vector<double> sig_beta(sum(g_per_ff), double(0));
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            sig_beta[k_0__] = vals_r__[pos__++];
        }
        size_t sig_beta_i_0_max__ = sum(g_per_ff);
        for (size_t i_0__ = 0; i_0__ < sig_beta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sig_beta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sig_beta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 24;
        if (!(context__.contains_r("sig_res")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sig_res missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sig_res");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sig_res", "double", context__.to_vec());
        double sig_res(0);
        sig_res = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sig_res);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sig_res: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 19;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = n_coef;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_constrain(lp__));
                else
                    alpha.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 20;
            std::vector<local_scalar_t__> z;
            size_t z_d_0_max__ = sum(lev_per_g);
            z.reserve(z_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < z_d_0_max__; ++d_0__) {
                if (jacobian__)
                    z.push_back(in__.scalar_constrain(lp__));
                else
                    z.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 22;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = max(p_groups);
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    phi.push_back(in__.scalar_lub_constrain(0, 1));
            }

            current_statement_begin__ = 23;
            std::vector<local_scalar_t__> sig_beta;
            size_t sig_beta_d_0_max__ = sum(g_per_ff);
            sig_beta.reserve(sig_beta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sig_beta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sig_beta.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sig_beta.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 24;
            local_scalar_t__ sig_res;
            (void) sig_res;  // dummy to suppress unused var warning
            if (jacobian__)
                sig_res = in__.scalar_lb_constrain(0, lp__);
            else
                sig_res = in__.scalar_lb_constrain(0);

            // transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("beta", "n_ts", n_ts);
            validate_non_negative_index("beta", "n_coef", n_coef);
            std::vector<std::vector<local_scalar_t__> > beta(n_ts, std::vector<local_scalar_t__>(n_coef, local_scalar_t__(0)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            current_statement_begin__ = 28;
            validate_non_negative_index("y_pred", "n_obs", n_obs);
            std::vector<local_scalar_t__> y_pred(n_obs, local_scalar_t__(0));
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred, DUMMY_VAR__);

            // transformed parameters block statements
            {
            current_statement_begin__ = 30;
            int xy_pos(0);
            (void) xy_pos;  // dummy to suppress unused var warning
            stan::math::fill(xy_pos, std::numeric_limits<int>::min());
            stan::math::assign(xy_pos,1);


            current_statement_begin__ = 32;
            for (int ts = 1; ts <= n_ts; ++ts) {
                {
                current_statement_begin__ = 33;
                int beta_pos(0);
                (void) beta_pos;  // dummy to suppress unused var warning
                stan::math::fill(beta_pos, std::numeric_limits<int>::min());
                stan::math::assign(beta_pos,1);


                current_statement_begin__ = 35;
                for (int c = 1; c <= n_coef; ++c) {

                    current_statement_begin__ = 36;
                    if (as_bool(logical_eq(get_base1(g_per_ff, c, "g_per_ff", 1), 0))) {

                        current_statement_begin__ = 37;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(alpha, c, "alpha", 1), 
                                    "assigning variable beta");
                    } else {
                        {
                        current_statement_begin__ = 39;
                        validate_non_negative_index("sigs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > sigs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(sigs, DUMMY_VAR__);
                        stan::math::fill(sigs, DUMMY_VAR__);

                        current_statement_begin__ = 40;
                        validate_non_negative_index("zs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > zs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(zs, DUMMY_VAR__);
                        stan::math::fill(zs, DUMMY_VAR__);


                        current_statement_begin__ = 42;
                        for (int i = beta_pos; i <= ((beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)) - 1); ++i) {

                            current_statement_begin__ = 43;
                            stan::model::assign(sigs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(sig_beta, i, "sig_beta", 1), 
                                        "assigning variable sigs");
                            current_statement_begin__ = 44;
                            stan::model::assign(zs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(z, get_base1(get_base1(b_groups, ts, "b_groups", 1), i, "b_groups", 2), "z", 1), 
                                        "assigning variable zs");
                        }
                        current_statement_begin__ = 47;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(alpha, c, "alpha", 1) + dot_product(sigs, zs)), 
                                    "assigning variable beta");
                        current_statement_begin__ = 48;
                        stan::math::assign(beta_pos, (beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)));
                        }
                    }
                }
                current_statement_begin__ = 52;
                if (as_bool(logical_eq(change, 1))) {

                    current_statement_begin__ = 53;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable y_pred");
                    current_statement_begin__ = 54;
                    for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                        current_statement_begin__ = 55;
                        stan::model::assign(y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    (dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi, get_base1(p_groups, ts, "p_groups", 1), "phi", 1), (get_base1(time, t, "time", 1) - get_base1(time, (t - 1), "time", 1))) * get_base1(y, (t - 1), "y", 1))), 
                                    "assigning variable y_pred");
                    }
                } else {

                    current_statement_begin__ = 58;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable y_pred");
                    current_statement_begin__ = 59;
                    for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                        current_statement_begin__ = 60;
                        stan::model::assign(y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    (dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi, get_base1(p_groups, ts, "p_groups", 1), "phi", 1), (get_base1(time, t, "time", 1) - get_base1(time, (t - 1), "time", 1))) * (get_base1(y, (t - 1), "y", 1) - dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"))))), 
                                    "assigning variable y_pred");
                    }
                }
                current_statement_begin__ = 64;
                stan::math::assign(xy_pos, (xy_pos + get_base1(obs_per, ts, "obs_per", 1)));
                }
            }
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 27;
            size_t beta_k_0_max__ = n_ts;
            size_t beta_k_1_max__ = n_coef;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(beta[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 28;
            size_t y_pred_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(y_pred[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: y_pred" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable y_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 70;
            lp_accum__.add(normal_log<propto__>(alpha, 0, 1));
            current_statement_begin__ = 71;
            lp_accum__.add(normal_log<propto__>(z, 0, 1));
            current_statement_begin__ = 72;
            for (int i = 1; i <= sum(g_per_ff); ++i) {

                current_statement_begin__ = 73;
                lp_accum__.add(gamma_log<propto__>(get_base1(sig_beta, i, "sig_beta", 1), 1.5, 3));
            }
            current_statement_begin__ = 75;
            for (int i = 1; i <= max(p_groups); ++i) {

                current_statement_begin__ = 77;
                lp_accum__.add(beta_log<propto__>(get_base1(phi, i, "phi", 1), 2, 2));
            }
            current_statement_begin__ = 79;
            lp_accum__.add(gamma_log<propto__>(sig_res, 1.5, 3));
            current_statement_begin__ = 81;
            lp_accum__.add(normal_log<propto__>(y, y_pred, sig_res));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("z");
        names__.push_back("phi");
        names__.push_back("sig_beta");
        names__.push_back("sig_res");
        names__.push_back("beta");
        names__.push_back("y_pred");
        names__.push_back("log_lik");
        names__.push_back("log_lik_sum");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_coef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(lev_per_g));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(max(p_groups));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(g_per_ff));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ts);
        dims__.push_back(n_coef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_armm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        std::vector<double> alpha;
        size_t alpha_d_0_max__ = n_coef;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_constrain());
        }
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }

        std::vector<double> z;
        size_t z_d_0_max__ = sum(lev_per_g);
        z.reserve(z_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < z_d_0_max__; ++d_0__) {
            z.push_back(in__.scalar_constrain());
        }
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            vars__.push_back(z[k_0__]);
        }

        std::vector<double> phi;
        size_t phi_d_0_max__ = max(p_groups);
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t phi_k_0_max__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }

        std::vector<double> sig_beta;
        size_t sig_beta_d_0_max__ = sum(g_per_ff);
        sig_beta.reserve(sig_beta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sig_beta_d_0_max__; ++d_0__) {
            sig_beta.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            vars__.push_back(sig_beta[k_0__]);
        }

        double sig_res = in__.scalar_lb_constrain(0);
        vars__.push_back(sig_res);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("beta", "n_ts", n_ts);
            validate_non_negative_index("beta", "n_coef", n_coef);
            std::vector<std::vector<double> > beta(n_ts, std::vector<double>(n_coef, double(0)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            current_statement_begin__ = 28;
            validate_non_negative_index("y_pred", "n_obs", n_obs);
            std::vector<double> y_pred(n_obs, double(0));
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred, DUMMY_VAR__);

            // do transformed parameters statements
            {
            current_statement_begin__ = 30;
            int xy_pos(0);
            (void) xy_pos;  // dummy to suppress unused var warning
            stan::math::fill(xy_pos, std::numeric_limits<int>::min());
            stan::math::assign(xy_pos,1);


            current_statement_begin__ = 32;
            for (int ts = 1; ts <= n_ts; ++ts) {
                {
                current_statement_begin__ = 33;
                int beta_pos(0);
                (void) beta_pos;  // dummy to suppress unused var warning
                stan::math::fill(beta_pos, std::numeric_limits<int>::min());
                stan::math::assign(beta_pos,1);


                current_statement_begin__ = 35;
                for (int c = 1; c <= n_coef; ++c) {

                    current_statement_begin__ = 36;
                    if (as_bool(logical_eq(get_base1(g_per_ff, c, "g_per_ff", 1), 0))) {

                        current_statement_begin__ = 37;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(alpha, c, "alpha", 1), 
                                    "assigning variable beta");
                    } else {
                        {
                        current_statement_begin__ = 39;
                        validate_non_negative_index("sigs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > sigs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(sigs, DUMMY_VAR__);
                        stan::math::fill(sigs, DUMMY_VAR__);

                        current_statement_begin__ = 40;
                        validate_non_negative_index("zs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > zs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(zs, DUMMY_VAR__);
                        stan::math::fill(zs, DUMMY_VAR__);


                        current_statement_begin__ = 42;
                        for (int i = beta_pos; i <= ((beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)) - 1); ++i) {

                            current_statement_begin__ = 43;
                            stan::model::assign(sigs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(sig_beta, i, "sig_beta", 1), 
                                        "assigning variable sigs");
                            current_statement_begin__ = 44;
                            stan::model::assign(zs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(z, get_base1(get_base1(b_groups, ts, "b_groups", 1), i, "b_groups", 2), "z", 1), 
                                        "assigning variable zs");
                        }
                        current_statement_begin__ = 47;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(alpha, c, "alpha", 1) + dot_product(sigs, zs)), 
                                    "assigning variable beta");
                        current_statement_begin__ = 48;
                        stan::math::assign(beta_pos, (beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)));
                        }
                    }
                }
                current_statement_begin__ = 52;
                if (as_bool(logical_eq(change, 1))) {

                    current_statement_begin__ = 53;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable y_pred");
                    current_statement_begin__ = 54;
                    for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                        current_statement_begin__ = 55;
                        stan::model::assign(y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    (dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi, get_base1(p_groups, ts, "p_groups", 1), "phi", 1), (get_base1(time, t, "time", 1) - get_base1(time, (t - 1), "time", 1))) * get_base1(y, (t - 1), "y", 1))), 
                                    "assigning variable y_pred");
                    }
                } else {

                    current_statement_begin__ = 58;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable y_pred");
                    current_statement_begin__ = 59;
                    for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                        current_statement_begin__ = 60;
                        stan::model::assign(y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    (dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi, get_base1(p_groups, ts, "p_groups", 1), "phi", 1), (get_base1(time, t, "time", 1) - get_base1(time, (t - 1), "time", 1))) * (get_base1(y, (t - 1), "y", 1) - dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"))))), 
                                    "assigning variable y_pred");
                    }
                }
                current_statement_begin__ = 64;
                stan::math::assign(xy_pos, (xy_pos + get_base1(obs_per, ts, "obs_per", 1)));
                }
            }
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t beta_k_0_max__ = n_ts;
                size_t beta_k_1_max__ = n_coef;
                for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                        vars__.push_back(beta[k_0__][k_1__]);
                    }
                }
                size_t y_pred_k_0_max__ = n_obs;
                for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                    vars__.push_back(y_pred[k_0__]);
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 84;
            validate_non_negative_index("log_lik", "n_obs", n_obs);
            std::vector<double> log_lik(n_obs, double(0));
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);

            current_statement_begin__ = 85;
            double log_lik_sum;
            (void) log_lik_sum;  // dummy to suppress unused var warning
            stan::math::initialize(log_lik_sum, DUMMY_VAR__);
            stan::math::fill(log_lik_sum, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 86;
            for (int i = 1; i <= n_obs; ++i) {

                current_statement_begin__ = 87;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_log(get_base1(y, i, "y", 1), get_base1(y_pred, i, "y_pred", 1), sig_res), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 89;
            stan::math::assign(log_lik_sum, sum(log_lik));

            // validate, write generated quantities
            current_statement_begin__ = 84;
            size_t log_lik_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                vars__.push_back(log_lik[k_0__]);
            }

            current_statement_begin__ = 85;
            vars__.push_back(log_lik_sum);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "model_armm";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sig_beta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_res";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t beta_k_0_max__ = n_ts;
            size_t beta_k_1_max__ = n_coef;
            for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t y_pred_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_k_0_max__ = n_obs;
        for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik_sum";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sig_beta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_res";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t beta_k_0_max__ = n_ts;
            size_t beta_k_1_max__ = n_coef;
            for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t y_pred_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_k_0_max__ = n_obs;
        for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik_sum";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}  // namespace



#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace model_armm_ss_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_armm_ss");
    reader.add_event(101, 99, "end", "model_armm_ss");
    return reader;
}

class model_armm_ss
  : public stan::model::model_base_crtp<model_armm_ss> {
private:
        int n_obs;
        int n_ts;
        std::vector<int> obs_per;
        int n_coef;
        std::vector<int> g_per_ff;
        std::vector<int> lev_per_g;
        std::vector<std::vector<int> > b_groups;
        std::vector<int> p_groups;
        int change;
        std::vector<double> y;
        std::vector<std::vector<double> > x;
        std::vector<double> time;
        double p_bound;
public:
    model_armm_ss(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_armm_ss(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_armm_ss_namespace::model_armm_ss";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec());
            n_obs = int(0);
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            n_obs = vals_i__[pos__++];

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_ts", "int", context__.to_vec());
            n_ts = int(0);
            vals_i__ = context__.vals_i("n_ts");
            pos__ = 0;
            n_ts = vals_i__[pos__++];

            current_statement_begin__ = 5;
            validate_non_negative_index("obs_per", "n_ts", n_ts);
            context__.validate_dims("data initialization", "obs_per", "int", context__.to_vec(n_ts));
            obs_per = std::vector<int>(n_ts, int(0));
            vals_i__ = context__.vals_i("obs_per");
            pos__ = 0;
            size_t obs_per_k_0_max__ = n_ts;
            for (size_t k_0__ = 0; k_0__ < obs_per_k_0_max__; ++k_0__) {
                obs_per[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_coef", "int", context__.to_vec());
            n_coef = int(0);
            vals_i__ = context__.vals_i("n_coef");
            pos__ = 0;
            n_coef = vals_i__[pos__++];

            current_statement_begin__ = 7;
            validate_non_negative_index("g_per_ff", "n_coef", n_coef);
            context__.validate_dims("data initialization", "g_per_ff", "int", context__.to_vec(n_coef));
            g_per_ff = std::vector<int>(n_coef, int(0));
            vals_i__ = context__.vals_i("g_per_ff");
            pos__ = 0;
            size_t g_per_ff_k_0_max__ = n_coef;
            for (size_t k_0__ = 0; k_0__ < g_per_ff_k_0_max__; ++k_0__) {
                g_per_ff[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 8;
            validate_non_negative_index("lev_per_g", "sum(g_per_ff)", sum(g_per_ff));
            context__.validate_dims("data initialization", "lev_per_g", "int", context__.to_vec(sum(g_per_ff)));
            lev_per_g = std::vector<int>(sum(g_per_ff), int(0));
            vals_i__ = context__.vals_i("lev_per_g");
            pos__ = 0;
            size_t lev_per_g_k_0_max__ = sum(g_per_ff);
            for (size_t k_0__ = 0; k_0__ < lev_per_g_k_0_max__; ++k_0__) {
                lev_per_g[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("b_groups", "n_ts", n_ts);
            validate_non_negative_index("b_groups", "sum(g_per_ff)", sum(g_per_ff));
            context__.validate_dims("data initialization", "b_groups", "int", context__.to_vec(n_ts,sum(g_per_ff)));
            b_groups = std::vector<std::vector<int> >(n_ts, std::vector<int>(sum(g_per_ff), int(0)));
            vals_i__ = context__.vals_i("b_groups");
            pos__ = 0;
            size_t b_groups_k_0_max__ = n_ts;
            size_t b_groups_k_1_max__ = sum(g_per_ff);
            for (size_t k_1__ = 0; k_1__ < b_groups_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < b_groups_k_0_max__; ++k_0__) {
                    b_groups[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("p_groups", "n_ts", n_ts);
            context__.validate_dims("data initialization", "p_groups", "int", context__.to_vec(n_ts));
            p_groups = std::vector<int>(n_ts, int(0));
            vals_i__ = context__.vals_i("p_groups");
            pos__ = 0;
            size_t p_groups_k_0_max__ = n_ts;
            for (size_t k_0__ = 0; k_0__ < p_groups_k_0_max__; ++k_0__) {
                p_groups[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "change", "int", context__.to_vec());
            change = int(0);
            vals_i__ = context__.vals_i("change");
            pos__ = 0;
            change = vals_i__[pos__++];
            check_greater_or_equal(function__, "change", change, 0);
            check_less_or_equal(function__, "change", change, 1);

            current_statement_begin__ = 14;
            validate_non_negative_index("y", "n_obs", n_obs);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(n_obs));
            y = std::vector<double>(n_obs, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 15;
            validate_non_negative_index("x", "n_obs", n_obs);
            validate_non_negative_index("x", "n_coef", n_coef);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(n_obs,n_coef));
            x = std::vector<std::vector<double> >(n_obs, std::vector<double>(n_coef, double(0)));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_k_0_max__ = n_obs;
            size_t x_k_1_max__ = n_coef;
            for (size_t k_1__ = 0; k_1__ < x_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    x[k_0__][k_1__] = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 16;
            validate_non_negative_index("time", "n_obs", n_obs);
            context__.validate_dims("data initialization", "time", "double", context__.to_vec(n_obs));
            time = std::vector<double>(n_obs, double(0));
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < time_k_0_max__; ++k_0__) {
                time[k_0__] = vals_r__[pos__++];
            }
            size_t time_i_0_max__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < time_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "time[i_0__]", time[i_0__], 0);
            }

            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "p_bound", "double", context__.to_vec());
            p_bound = double(0);
            vals_r__ = context__.vals_r("p_bound");
            pos__ = 0;
            p_bound = vals_r__[pos__++];
            check_greater_or_equal(function__, "p_bound", p_bound, 0);


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 20;
            validate_non_negative_index("alpha", "n_coef", n_coef);
            num_params_r__ += (1 * n_coef);
            current_statement_begin__ = 21;
            validate_non_negative_index("z", "sum(lev_per_g)", sum(lev_per_g));
            num_params_r__ += (1 * sum(lev_per_g));
            current_statement_begin__ = 23;
            validate_non_negative_index("phi", "max(p_groups)", max(p_groups));
            num_params_r__ += (1 * max(p_groups));
            current_statement_begin__ = 24;
            validate_non_negative_index("sig_beta", "sum(g_per_ff)", sum(g_per_ff));
            num_params_r__ += (1 * sum(g_per_ff));
            current_statement_begin__ = 25;
            validate_non_negative_index("ze", "(n_obs - n_ts)", (n_obs - n_ts));
            num_params_r__ += (1 * (n_obs - n_ts));
            current_statement_begin__ = 26;
            num_params_r__ += 1;
            current_statement_begin__ = 27;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_armm_ss() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 20;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "n_coef", n_coef);
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec(n_coef));
        std::vector<double> alpha(n_coef, double(0));
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = n_coef;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 21;
        if (!(context__.contains_r("z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "sum(lev_per_g)", sum(lev_per_g));
        context__.validate_dims("parameter initialization", "z", "double", context__.to_vec(sum(lev_per_g)));
        std::vector<double> z(sum(lev_per_g), double(0));
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            z[k_0__] = vals_r__[pos__++];
        }
        size_t z_i_0_max__ = sum(lev_per_g);
        for (size_t i_0__ = 0; i_0__ < z_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(z[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 23;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "max(p_groups)", max(p_groups));
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec(max(p_groups)));
        std::vector<double> phi(max(p_groups), double(0));
        size_t phi_k_0_max__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = max(p_groups);
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 24;
        if (!(context__.contains_r("sig_beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sig_beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sig_beta");
        pos__ = 0U;
        validate_non_negative_index("sig_beta", "sum(g_per_ff)", sum(g_per_ff));
        context__.validate_dims("parameter initialization", "sig_beta", "double", context__.to_vec(sum(g_per_ff)));
        std::vector<double> sig_beta(sum(g_per_ff), double(0));
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            sig_beta[k_0__] = vals_r__[pos__++];
        }
        size_t sig_beta_i_0_max__ = sum(g_per_ff);
        for (size_t i_0__ = 0; i_0__ < sig_beta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sig_beta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sig_beta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 25;
        if (!(context__.contains_r("ze")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ze missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ze");
        pos__ = 0U;
        validate_non_negative_index("ze", "(n_obs - n_ts)", (n_obs - n_ts));
        context__.validate_dims("parameter initialization", "ze", "double", context__.to_vec((n_obs - n_ts)));
        std::vector<double> ze((n_obs - n_ts), double(0));
        size_t ze_k_0_max__ = (n_obs - n_ts);
        for (size_t k_0__ = 0; k_0__ < ze_k_0_max__; ++k_0__) {
            ze[k_0__] = vals_r__[pos__++];
        }
        size_t ze_i_0_max__ = (n_obs - n_ts);
        for (size_t i_0__ = 0; i_0__ < ze_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(ze[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ze: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 26;
        if (!(context__.contains_r("sig_proc")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sig_proc missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sig_proc");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sig_proc", "double", context__.to_vec());
        double sig_proc(0);
        sig_proc = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sig_proc);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sig_proc: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 27;
        if (!(context__.contains_r("sig_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sig_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sig_obs");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sig_obs", "double", context__.to_vec());
        double sig_obs(0);
        sig_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sig_obs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sig_obs: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 20;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = n_coef;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_constrain(lp__));
                else
                    alpha.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 21;
            std::vector<local_scalar_t__> z;
            size_t z_d_0_max__ = sum(lev_per_g);
            z.reserve(z_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < z_d_0_max__; ++d_0__) {
                if (jacobian__)
                    z.push_back(in__.scalar_constrain(lp__));
                else
                    z.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 23;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = max(p_groups);
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    phi.push_back(in__.scalar_lub_constrain(0, 1));
            }

            current_statement_begin__ = 24;
            std::vector<local_scalar_t__> sig_beta;
            size_t sig_beta_d_0_max__ = sum(g_per_ff);
            sig_beta.reserve(sig_beta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sig_beta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sig_beta.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sig_beta.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 25;
            std::vector<local_scalar_t__> ze;
            size_t ze_d_0_max__ = (n_obs - n_ts);
            ze.reserve(ze_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ze_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ze.push_back(in__.scalar_constrain(lp__));
                else
                    ze.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 26;
            local_scalar_t__ sig_proc;
            (void) sig_proc;  // dummy to suppress unused var warning
            if (jacobian__)
                sig_proc = in__.scalar_lb_constrain(0, lp__);
            else
                sig_proc = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 27;
            local_scalar_t__ sig_obs;
            (void) sig_obs;  // dummy to suppress unused var warning
            if (jacobian__)
                sig_obs = in__.scalar_lb_constrain(0, lp__);
            else
                sig_obs = in__.scalar_lb_constrain(0);

            // transformed parameters
            current_statement_begin__ = 30;
            validate_non_negative_index("beta", "n_ts", n_ts);
            validate_non_negative_index("beta", "n_coef", n_coef);
            std::vector<std::vector<local_scalar_t__> > beta(n_ts, std::vector<local_scalar_t__>(n_coef, local_scalar_t__(0)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            current_statement_begin__ = 31;
            validate_non_negative_index("y_pred", "n_obs", n_obs);
            std::vector<local_scalar_t__> y_pred(n_obs, local_scalar_t__(0));
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred, DUMMY_VAR__);

            // transformed parameters block statements
            {
            current_statement_begin__ = 33;
            int xy_pos(0);
            (void) xy_pos;  // dummy to suppress unused var warning
            stan::math::fill(xy_pos, std::numeric_limits<int>::min());
            stan::math::assign(xy_pos,1);


            current_statement_begin__ = 35;
            for (int ts = 1; ts <= n_ts; ++ts) {
                {
                current_statement_begin__ = 36;
                int beta_pos(0);
                (void) beta_pos;  // dummy to suppress unused var warning
                stan::math::fill(beta_pos, std::numeric_limits<int>::min());
                stan::math::assign(beta_pos,1);


                current_statement_begin__ = 38;
                for (int c = 1; c <= n_coef; ++c) {

                    current_statement_begin__ = 39;
                    if (as_bool(logical_eq(get_base1(g_per_ff, c, "g_per_ff", 1), 0))) {

                        current_statement_begin__ = 40;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(alpha, c, "alpha", 1), 
                                    "assigning variable beta");
                    } else {
                        {
                        current_statement_begin__ = 42;
                        validate_non_negative_index("sigs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > sigs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(sigs, DUMMY_VAR__);
                        stan::math::fill(sigs, DUMMY_VAR__);

                        current_statement_begin__ = 43;
                        validate_non_negative_index("zs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > zs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(zs, DUMMY_VAR__);
                        stan::math::fill(zs, DUMMY_VAR__);


                        current_statement_begin__ = 45;
                        for (int i = beta_pos; i <= ((beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)) - 1); ++i) {

                            current_statement_begin__ = 46;
                            stan::model::assign(sigs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(sig_beta, i, "sig_beta", 1), 
                                        "assigning variable sigs");
                            current_statement_begin__ = 47;
                            stan::model::assign(zs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(z, get_base1(get_base1(b_groups, ts, "b_groups", 1), i, "b_groups", 2), "z", 1), 
                                        "assigning variable zs");
                        }
                        current_statement_begin__ = 50;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(alpha, c, "alpha", 1) + dot_product(sigs, zs)), 
                                    "assigning variable beta");
                        current_statement_begin__ = 51;
                        stan::math::assign(beta_pos, (beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)));
                        }
                    }
                }
                current_statement_begin__ = 55;
                if (as_bool(logical_eq(change, 1))) {

                    current_statement_begin__ = 56;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable y_pred");
                    current_statement_begin__ = 57;
                    for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                        current_statement_begin__ = 58;
                        stan::model::assign(y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    ((dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi, get_base1(p_groups, ts, "p_groups", 1), "phi", 1), (get_base1(time, t, "time", 1) - get_base1(time, (t - 1), "time", 1))) * get_base1(y_pred, (t - 1), "y_pred", 1))) + (sig_proc * get_base1(ze, (t - ts), "ze", 1))), 
                                    "assigning variable y_pred");
                    }
                } else {

                    current_statement_begin__ = 63;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable y_pred");
                    current_statement_begin__ = 64;
                    for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                        current_statement_begin__ = 65;
                        stan::model::assign(y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    ((dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi, get_base1(p_groups, ts, "p_groups", 1), "phi", 1), (get_base1(time, t, "time", 1) - get_base1(time, (t - 1), "time", 1))) * (get_base1(y_pred, (t - 1), "y_pred", 1) - dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"))))) + (sig_proc * get_base1(ze, (t - ts), "ze", 1))), 
                                    "assigning variable y_pred");
                    }
                }
                current_statement_begin__ = 71;
                stan::math::assign(xy_pos, (xy_pos + get_base1(obs_per, ts, "obs_per", 1)));
                }
            }
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 30;
            size_t beta_k_0_max__ = n_ts;
            size_t beta_k_1_max__ = n_coef;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(beta[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 31;
            size_t y_pred_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(y_pred[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: y_pred" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable y_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 77;
            lp_accum__.add(normal_log<propto__>(alpha, 0, 1));
            current_statement_begin__ = 78;
            lp_accum__.add(normal_log<propto__>(z, 0, 1));
            current_statement_begin__ = 79;
            for (int i = 1; i <= sum(g_per_ff); ++i) {

                current_statement_begin__ = 80;
                lp_accum__.add(gamma_log<propto__>(get_base1(sig_beta, i, "sig_beta", 1), 1.5, 3));
            }
            current_statement_begin__ = 82;
            for (int i = 1; i <= max(p_groups); ++i) {

                current_statement_begin__ = 84;
                lp_accum__.add(beta_log<propto__>(get_base1(phi, i, "phi", 1), 2, 2));
            }
            current_statement_begin__ = 86;
            lp_accum__.add(normal_log<propto__>(ze, 0, 1));
            current_statement_begin__ = 87;
            lp_accum__.add(gamma_log<propto__>(sig_obs, 1.5, 3));
            current_statement_begin__ = 88;
            lp_accum__.add(gamma_log<propto__>(sig_proc, 1.5, 3));
            current_statement_begin__ = 90;
            lp_accum__.add(normal_log<propto__>(y, y_pred, sig_obs));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("z");
        names__.push_back("phi");
        names__.push_back("sig_beta");
        names__.push_back("ze");
        names__.push_back("sig_proc");
        names__.push_back("sig_obs");
        names__.push_back("beta");
        names__.push_back("y_pred");
        names__.push_back("log_lik");
        names__.push_back("log_lik_sum");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_coef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(lev_per_g));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(max(p_groups));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(g_per_ff));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_obs - n_ts));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ts);
        dims__.push_back(n_coef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_armm_ss_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        std::vector<double> alpha;
        size_t alpha_d_0_max__ = n_coef;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_constrain());
        }
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }

        std::vector<double> z;
        size_t z_d_0_max__ = sum(lev_per_g);
        z.reserve(z_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < z_d_0_max__; ++d_0__) {
            z.push_back(in__.scalar_constrain());
        }
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            vars__.push_back(z[k_0__]);
        }

        std::vector<double> phi;
        size_t phi_d_0_max__ = max(p_groups);
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t phi_k_0_max__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }

        std::vector<double> sig_beta;
        size_t sig_beta_d_0_max__ = sum(g_per_ff);
        sig_beta.reserve(sig_beta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sig_beta_d_0_max__; ++d_0__) {
            sig_beta.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            vars__.push_back(sig_beta[k_0__]);
        }

        std::vector<double> ze;
        size_t ze_d_0_max__ = (n_obs - n_ts);
        ze.reserve(ze_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ze_d_0_max__; ++d_0__) {
            ze.push_back(in__.scalar_constrain());
        }
        size_t ze_k_0_max__ = (n_obs - n_ts);
        for (size_t k_0__ = 0; k_0__ < ze_k_0_max__; ++k_0__) {
            vars__.push_back(ze[k_0__]);
        }

        double sig_proc = in__.scalar_lb_constrain(0);
        vars__.push_back(sig_proc);

        double sig_obs = in__.scalar_lb_constrain(0);
        vars__.push_back(sig_obs);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 30;
            validate_non_negative_index("beta", "n_ts", n_ts);
            validate_non_negative_index("beta", "n_coef", n_coef);
            std::vector<std::vector<double> > beta(n_ts, std::vector<double>(n_coef, double(0)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            current_statement_begin__ = 31;
            validate_non_negative_index("y_pred", "n_obs", n_obs);
            std::vector<double> y_pred(n_obs, double(0));
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred, DUMMY_VAR__);

            // do transformed parameters statements
            {
            current_statement_begin__ = 33;
            int xy_pos(0);
            (void) xy_pos;  // dummy to suppress unused var warning
            stan::math::fill(xy_pos, std::numeric_limits<int>::min());
            stan::math::assign(xy_pos,1);


            current_statement_begin__ = 35;
            for (int ts = 1; ts <= n_ts; ++ts) {
                {
                current_statement_begin__ = 36;
                int beta_pos(0);
                (void) beta_pos;  // dummy to suppress unused var warning
                stan::math::fill(beta_pos, std::numeric_limits<int>::min());
                stan::math::assign(beta_pos,1);


                current_statement_begin__ = 38;
                for (int c = 1; c <= n_coef; ++c) {

                    current_statement_begin__ = 39;
                    if (as_bool(logical_eq(get_base1(g_per_ff, c, "g_per_ff", 1), 0))) {

                        current_statement_begin__ = 40;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(alpha, c, "alpha", 1), 
                                    "assigning variable beta");
                    } else {
                        {
                        current_statement_begin__ = 42;
                        validate_non_negative_index("sigs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > sigs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(sigs, DUMMY_VAR__);
                        stan::math::fill(sigs, DUMMY_VAR__);

                        current_statement_begin__ = 43;
                        validate_non_negative_index("zs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > zs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(zs, DUMMY_VAR__);
                        stan::math::fill(zs, DUMMY_VAR__);


                        current_statement_begin__ = 45;
                        for (int i = beta_pos; i <= ((beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)) - 1); ++i) {

                            current_statement_begin__ = 46;
                            stan::model::assign(sigs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(sig_beta, i, "sig_beta", 1), 
                                        "assigning variable sigs");
                            current_statement_begin__ = 47;
                            stan::model::assign(zs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(z, get_base1(get_base1(b_groups, ts, "b_groups", 1), i, "b_groups", 2), "z", 1), 
                                        "assigning variable zs");
                        }
                        current_statement_begin__ = 50;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(alpha, c, "alpha", 1) + dot_product(sigs, zs)), 
                                    "assigning variable beta");
                        current_statement_begin__ = 51;
                        stan::math::assign(beta_pos, (beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)));
                        }
                    }
                }
                current_statement_begin__ = 55;
                if (as_bool(logical_eq(change, 1))) {

                    current_statement_begin__ = 56;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable y_pred");
                    current_statement_begin__ = 57;
                    for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                        current_statement_begin__ = 58;
                        stan::model::assign(y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    ((dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi, get_base1(p_groups, ts, "p_groups", 1), "phi", 1), (get_base1(time, t, "time", 1) - get_base1(time, (t - 1), "time", 1))) * get_base1(y_pred, (t - 1), "y_pred", 1))) + (sig_proc * get_base1(ze, (t - ts), "ze", 1))), 
                                    "assigning variable y_pred");
                    }
                } else {

                    current_statement_begin__ = 63;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable y_pred");
                    current_statement_begin__ = 64;
                    for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                        current_statement_begin__ = 65;
                        stan::model::assign(y_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    ((dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi, get_base1(p_groups, ts, "p_groups", 1), "phi", 1), (get_base1(time, t, "time", 1) - get_base1(time, (t - 1), "time", 1))) * (get_base1(y_pred, (t - 1), "y_pred", 1) - dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"))))) + (sig_proc * get_base1(ze, (t - ts), "ze", 1))), 
                                    "assigning variable y_pred");
                    }
                }
                current_statement_begin__ = 71;
                stan::math::assign(xy_pos, (xy_pos + get_base1(obs_per, ts, "obs_per", 1)));
                }
            }
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t beta_k_0_max__ = n_ts;
                size_t beta_k_1_max__ = n_coef;
                for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                        vars__.push_back(beta[k_0__][k_1__]);
                    }
                }
                size_t y_pred_k_0_max__ = n_obs;
                for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                    vars__.push_back(y_pred[k_0__]);
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 93;
            validate_non_negative_index("log_lik", "n_obs", n_obs);
            std::vector<double> log_lik(n_obs, double(0));
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);

            current_statement_begin__ = 94;
            double log_lik_sum;
            (void) log_lik_sum;  // dummy to suppress unused var warning
            stan::math::initialize(log_lik_sum, DUMMY_VAR__);
            stan::math::fill(log_lik_sum, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 95;
            for (int i = 1; i <= n_obs; ++i) {

                current_statement_begin__ = 96;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_log(get_base1(y, i, "y", 1), get_base1(y_pred, i, "y_pred", 1), sig_obs), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 98;
            stan::math::assign(log_lik_sum, sum(log_lik));

            // validate, write generated quantities
            current_statement_begin__ = 93;
            size_t log_lik_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                vars__.push_back(log_lik[k_0__]);
            }

            current_statement_begin__ = 94;
            vars__.push_back(log_lik_sum);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "model_armm_ss";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sig_beta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ze_k_0_max__ = (n_obs - n_ts);
        for (size_t k_0__ = 0; k_0__ < ze_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ze" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_proc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_obs";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t beta_k_0_max__ = n_ts;
            size_t beta_k_1_max__ = n_coef;
            for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t y_pred_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_k_0_max__ = n_obs;
        for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik_sum";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sig_beta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ze_k_0_max__ = (n_obs - n_ts);
        for (size_t k_0__ = 0; k_0__ < ze_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ze" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_proc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_obs";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t beta_k_0_max__ = n_ts;
            size_t beta_k_1_max__ = n_coef;
            for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t y_pred_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_k_0_max__ = n_obs;
        for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik_sum";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}  // namespace



#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace model_armm_ss_lnp_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_armm_ss_lnp");
    reader.add_event(104, 102, "end", "model_armm_ss_lnp");
    return reader;
}

class model_armm_ss_lnp
  : public stan::model::model_base_crtp<model_armm_ss_lnp> {
private:
        int n_obs;
        int n_ts;
        std::vector<int> obs_per;
        int n_coef;
        std::vector<int> g_per_ff;
        std::vector<int> lev_per_g;
        std::vector<std::vector<int> > b_groups;
        std::vector<int> p_groups;
        int change;
        std::vector<int> y;
        std::vector<std::vector<double> > x;
        std::vector<double> time;
        double p_bound;
public:
    model_armm_ss_lnp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_armm_ss_lnp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_armm_ss_lnp_namespace::model_armm_ss_lnp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec());
            n_obs = int(0);
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            n_obs = vals_i__[pos__++];

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_ts", "int", context__.to_vec());
            n_ts = int(0);
            vals_i__ = context__.vals_i("n_ts");
            pos__ = 0;
            n_ts = vals_i__[pos__++];

            current_statement_begin__ = 5;
            validate_non_negative_index("obs_per", "n_ts", n_ts);
            context__.validate_dims("data initialization", "obs_per", "int", context__.to_vec(n_ts));
            obs_per = std::vector<int>(n_ts, int(0));
            vals_i__ = context__.vals_i("obs_per");
            pos__ = 0;
            size_t obs_per_k_0_max__ = n_ts;
            for (size_t k_0__ = 0; k_0__ < obs_per_k_0_max__; ++k_0__) {
                obs_per[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_coef", "int", context__.to_vec());
            n_coef = int(0);
            vals_i__ = context__.vals_i("n_coef");
            pos__ = 0;
            n_coef = vals_i__[pos__++];

            current_statement_begin__ = 7;
            validate_non_negative_index("g_per_ff", "n_coef", n_coef);
            context__.validate_dims("data initialization", "g_per_ff", "int", context__.to_vec(n_coef));
            g_per_ff = std::vector<int>(n_coef, int(0));
            vals_i__ = context__.vals_i("g_per_ff");
            pos__ = 0;
            size_t g_per_ff_k_0_max__ = n_coef;
            for (size_t k_0__ = 0; k_0__ < g_per_ff_k_0_max__; ++k_0__) {
                g_per_ff[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 8;
            validate_non_negative_index("lev_per_g", "sum(g_per_ff)", sum(g_per_ff));
            context__.validate_dims("data initialization", "lev_per_g", "int", context__.to_vec(sum(g_per_ff)));
            lev_per_g = std::vector<int>(sum(g_per_ff), int(0));
            vals_i__ = context__.vals_i("lev_per_g");
            pos__ = 0;
            size_t lev_per_g_k_0_max__ = sum(g_per_ff);
            for (size_t k_0__ = 0; k_0__ < lev_per_g_k_0_max__; ++k_0__) {
                lev_per_g[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("b_groups", "n_ts", n_ts);
            validate_non_negative_index("b_groups", "sum(g_per_ff)", sum(g_per_ff));
            context__.validate_dims("data initialization", "b_groups", "int", context__.to_vec(n_ts,sum(g_per_ff)));
            b_groups = std::vector<std::vector<int> >(n_ts, std::vector<int>(sum(g_per_ff), int(0)));
            vals_i__ = context__.vals_i("b_groups");
            pos__ = 0;
            size_t b_groups_k_0_max__ = n_ts;
            size_t b_groups_k_1_max__ = sum(g_per_ff);
            for (size_t k_1__ = 0; k_1__ < b_groups_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < b_groups_k_0_max__; ++k_0__) {
                    b_groups[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("p_groups", "n_ts", n_ts);
            context__.validate_dims("data initialization", "p_groups", "int", context__.to_vec(n_ts));
            p_groups = std::vector<int>(n_ts, int(0));
            vals_i__ = context__.vals_i("p_groups");
            pos__ = 0;
            size_t p_groups_k_0_max__ = n_ts;
            for (size_t k_0__ = 0; k_0__ < p_groups_k_0_max__; ++k_0__) {
                p_groups[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "change", "int", context__.to_vec());
            change = int(0);
            vals_i__ = context__.vals_i("change");
            pos__ = 0;
            change = vals_i__[pos__++];
            check_greater_or_equal(function__, "change", change, 0);
            check_less_or_equal(function__, "change", change, 1);

            current_statement_begin__ = 14;
            validate_non_negative_index("y", "n_obs", n_obs);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(n_obs));
            y = std::vector<int>(n_obs, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 15;
            validate_non_negative_index("x", "n_obs", n_obs);
            validate_non_negative_index("x", "n_coef", n_coef);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(n_obs,n_coef));
            x = std::vector<std::vector<double> >(n_obs, std::vector<double>(n_coef, double(0)));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_k_0_max__ = n_obs;
            size_t x_k_1_max__ = n_coef;
            for (size_t k_1__ = 0; k_1__ < x_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    x[k_0__][k_1__] = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 16;
            validate_non_negative_index("time", "n_obs", n_obs);
            context__.validate_dims("data initialization", "time", "double", context__.to_vec(n_obs));
            time = std::vector<double>(n_obs, double(0));
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < time_k_0_max__; ++k_0__) {
                time[k_0__] = vals_r__[pos__++];
            }
            size_t time_i_0_max__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < time_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "time[i_0__]", time[i_0__], 0);
            }

            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "p_bound", "double", context__.to_vec());
            p_bound = double(0);
            vals_r__ = context__.vals_r("p_bound");
            pos__ = 0;
            p_bound = vals_r__[pos__++];
            check_greater_or_equal(function__, "p_bound", p_bound, 0);


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 20;
            validate_non_negative_index("alpha", "n_coef", n_coef);
            num_params_r__ += (1 * n_coef);
            current_statement_begin__ = 21;
            validate_non_negative_index("z", "sum(lev_per_g)", sum(lev_per_g));
            num_params_r__ += (1 * sum(lev_per_g));
            current_statement_begin__ = 23;
            validate_non_negative_index("phi", "max(p_groups)", max(p_groups));
            num_params_r__ += (1 * max(p_groups));
            current_statement_begin__ = 24;
            validate_non_negative_index("sig_beta", "sum(g_per_ff)", sum(g_per_ff));
            num_params_r__ += (1 * sum(g_per_ff));
            current_statement_begin__ = 25;
            validate_non_negative_index("ze", "(n_obs - n_ts)", (n_obs - n_ts));
            num_params_r__ += (1 * (n_obs - n_ts));
            current_statement_begin__ = 26;
            num_params_r__ += 1;
            current_statement_begin__ = 27;
            num_params_r__ += 1;
            current_statement_begin__ = 28;
            validate_non_negative_index("y_pred", "n_obs", n_obs);
            num_params_r__ += (1 * n_obs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_armm_ss_lnp() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 20;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "n_coef", n_coef);
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec(n_coef));
        std::vector<double> alpha(n_coef, double(0));
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = n_coef;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 21;
        if (!(context__.contains_r("z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "sum(lev_per_g)", sum(lev_per_g));
        context__.validate_dims("parameter initialization", "z", "double", context__.to_vec(sum(lev_per_g)));
        std::vector<double> z(sum(lev_per_g), double(0));
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            z[k_0__] = vals_r__[pos__++];
        }
        size_t z_i_0_max__ = sum(lev_per_g);
        for (size_t i_0__ = 0; i_0__ < z_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(z[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 23;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "max(p_groups)", max(p_groups));
        context__.validate_dims("parameter initialization", "phi", "double", context__.to_vec(max(p_groups)));
        std::vector<double> phi(max(p_groups), double(0));
        size_t phi_k_0_max__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            phi[k_0__] = vals_r__[pos__++];
        }
        size_t phi_i_0_max__ = max(p_groups);
        for (size_t i_0__ = 0; i_0__ < phi_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1, phi[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 24;
        if (!(context__.contains_r("sig_beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sig_beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sig_beta");
        pos__ = 0U;
        validate_non_negative_index("sig_beta", "sum(g_per_ff)", sum(g_per_ff));
        context__.validate_dims("parameter initialization", "sig_beta", "double", context__.to_vec(sum(g_per_ff)));
        std::vector<double> sig_beta(sum(g_per_ff), double(0));
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            sig_beta[k_0__] = vals_r__[pos__++];
        }
        size_t sig_beta_i_0_max__ = sum(g_per_ff);
        for (size_t i_0__ = 0; i_0__ < sig_beta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sig_beta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sig_beta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 25;
        if (!(context__.contains_r("ze")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable ze missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("ze");
        pos__ = 0U;
        validate_non_negative_index("ze", "(n_obs - n_ts)", (n_obs - n_ts));
        context__.validate_dims("parameter initialization", "ze", "double", context__.to_vec((n_obs - n_ts)));
        std::vector<double> ze((n_obs - n_ts), double(0));
        size_t ze_k_0_max__ = (n_obs - n_ts);
        for (size_t k_0__ = 0; k_0__ < ze_k_0_max__; ++k_0__) {
            ze[k_0__] = vals_r__[pos__++];
        }
        size_t ze_i_0_max__ = (n_obs - n_ts);
        for (size_t i_0__ = 0; i_0__ < ze_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(ze[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable ze: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 26;
        if (!(context__.contains_r("sig_proc")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sig_proc missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sig_proc");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sig_proc", "double", context__.to_vec());
        double sig_proc(0);
        sig_proc = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sig_proc);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sig_proc: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 27;
        if (!(context__.contains_r("sig_obs")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sig_obs missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sig_obs");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sig_obs", "double", context__.to_vec());
        double sig_obs(0);
        sig_obs = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sig_obs);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sig_obs: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 28;
        if (!(context__.contains_r("y_pred")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable y_pred missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("y_pred");
        pos__ = 0U;
        validate_non_negative_index("y_pred", "n_obs", n_obs);
        context__.validate_dims("parameter initialization", "y_pred", "double", context__.to_vec(n_obs));
        std::vector<double> y_pred(n_obs, double(0));
        size_t y_pred_k_0_max__ = n_obs;
        for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
            y_pred[k_0__] = vals_r__[pos__++];
        }
        size_t y_pred_i_0_max__ = n_obs;
        for (size_t i_0__ = 0; i_0__ < y_pred_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, y_pred[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable y_pred: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 20;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = n_coef;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_constrain(lp__));
                else
                    alpha.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 21;
            std::vector<local_scalar_t__> z;
            size_t z_d_0_max__ = sum(lev_per_g);
            z.reserve(z_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < z_d_0_max__; ++d_0__) {
                if (jacobian__)
                    z.push_back(in__.scalar_constrain(lp__));
                else
                    z.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 23;
            std::vector<local_scalar_t__> phi;
            size_t phi_d_0_max__ = max(p_groups);
            phi.reserve(phi_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lub_constrain(0, 1, lp__));
                else
                    phi.push_back(in__.scalar_lub_constrain(0, 1));
            }

            current_statement_begin__ = 24;
            std::vector<local_scalar_t__> sig_beta;
            size_t sig_beta_d_0_max__ = sum(g_per_ff);
            sig_beta.reserve(sig_beta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sig_beta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sig_beta.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sig_beta.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 25;
            std::vector<local_scalar_t__> ze;
            size_t ze_d_0_max__ = (n_obs - n_ts);
            ze.reserve(ze_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < ze_d_0_max__; ++d_0__) {
                if (jacobian__)
                    ze.push_back(in__.scalar_constrain(lp__));
                else
                    ze.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 26;
            local_scalar_t__ sig_proc;
            (void) sig_proc;  // dummy to suppress unused var warning
            if (jacobian__)
                sig_proc = in__.scalar_lb_constrain(0, lp__);
            else
                sig_proc = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 27;
            local_scalar_t__ sig_obs;
            (void) sig_obs;  // dummy to suppress unused var warning
            if (jacobian__)
                sig_obs = in__.scalar_lb_constrain(0, lp__);
            else
                sig_obs = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 28;
            std::vector<local_scalar_t__> y_pred;
            size_t y_pred_d_0_max__ = n_obs;
            y_pred.reserve(y_pred_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < y_pred_d_0_max__; ++d_0__) {
                if (jacobian__)
                    y_pred.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    y_pred.push_back(in__.scalar_lb_constrain(0));
            }

            // transformed parameters
            current_statement_begin__ = 31;
            validate_non_negative_index("beta", "n_ts", n_ts);
            validate_non_negative_index("beta", "n_coef", n_coef);
            std::vector<std::vector<local_scalar_t__> > beta(n_ts, std::vector<local_scalar_t__>(n_coef, local_scalar_t__(0)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            current_statement_begin__ = 32;
            validate_non_negative_index("ly_pred", "n_obs", n_obs);
            std::vector<local_scalar_t__> ly_pred(n_obs, local_scalar_t__(0));
            stan::math::initialize(ly_pred, DUMMY_VAR__);
            stan::math::fill(ly_pred, DUMMY_VAR__);

            // transformed parameters block statements
            {
            current_statement_begin__ = 34;
            int xy_pos(0);
            (void) xy_pos;  // dummy to suppress unused var warning
            stan::math::fill(xy_pos, std::numeric_limits<int>::min());
            stan::math::assign(xy_pos,1);


            current_statement_begin__ = 36;
            for (int ts = 1; ts <= n_ts; ++ts) {
                {
                current_statement_begin__ = 37;
                int beta_pos(0);
                (void) beta_pos;  // dummy to suppress unused var warning
                stan::math::fill(beta_pos, std::numeric_limits<int>::min());
                stan::math::assign(beta_pos,1);


                current_statement_begin__ = 39;
                for (int c = 1; c <= n_coef; ++c) {

                    current_statement_begin__ = 40;
                    if (as_bool(logical_eq(get_base1(g_per_ff, c, "g_per_ff", 1), 0))) {

                        current_statement_begin__ = 41;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(alpha, c, "alpha", 1), 
                                    "assigning variable beta");
                    } else {
                        {
                        current_statement_begin__ = 43;
                        validate_non_negative_index("sigs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > sigs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(sigs, DUMMY_VAR__);
                        stan::math::fill(sigs, DUMMY_VAR__);

                        current_statement_begin__ = 44;
                        validate_non_negative_index("zs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > zs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(zs, DUMMY_VAR__);
                        stan::math::fill(zs, DUMMY_VAR__);


                        current_statement_begin__ = 46;
                        for (int i = beta_pos; i <= ((beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)) - 1); ++i) {

                            current_statement_begin__ = 47;
                            stan::model::assign(sigs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(sig_beta, i, "sig_beta", 1), 
                                        "assigning variable sigs");
                            current_statement_begin__ = 48;
                            stan::model::assign(zs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(z, get_base1(get_base1(b_groups, ts, "b_groups", 1), i, "b_groups", 2), "z", 1), 
                                        "assigning variable zs");
                        }
                        current_statement_begin__ = 51;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(alpha, c, "alpha", 1) + dot_product(sigs, zs)), 
                                    "assigning variable beta");
                        current_statement_begin__ = 52;
                        stan::math::assign(beta_pos, (beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)));
                        }
                    }
                }
                current_statement_begin__ = 56;
                if (as_bool(logical_eq(change, 1))) {

                    current_statement_begin__ = 57;
                    stan::model::assign(ly_pred, 
                                stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable ly_pred");
                    current_statement_begin__ = 58;
                    for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                        current_statement_begin__ = 59;
                        stan::model::assign(ly_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    ((dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi, get_base1(p_groups, ts, "p_groups", 1), "phi", 1), (get_base1(time, t, "time", 1) - get_base1(time, (t - 1), "time", 1))) * get_base1(ly_pred, (t - 1), "ly_pred", 1))) + (sig_proc * get_base1(ze, (t - ts), "ze", 1))), 
                                    "assigning variable ly_pred");
                    }
                } else {

                    current_statement_begin__ = 64;
                    stan::model::assign(ly_pred, 
                                stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable ly_pred");
                    current_statement_begin__ = 65;
                    for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                        current_statement_begin__ = 66;
                        stan::model::assign(ly_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    ((dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi, get_base1(p_groups, ts, "p_groups", 1), "phi", 1), (get_base1(time, t, "time", 1) - get_base1(time, (t - 1), "time", 1))) * (get_base1(ly_pred, (t - 1), "ly_pred", 1) - dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"))))) + (sig_proc * get_base1(ze, (t - ts), "ze", 1))), 
                                    "assigning variable ly_pred");
                    }
                }
                current_statement_begin__ = 72;
                stan::math::assign(xy_pos, (xy_pos + get_base1(obs_per, ts, "obs_per", 1)));
                }
            }
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 31;
            size_t beta_k_0_max__ = n_ts;
            size_t beta_k_1_max__ = n_coef;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(beta[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 32;
            size_t ly_pred_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < ly_pred_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(ly_pred[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: ly_pred" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable ly_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 78;
            lp_accum__.add(normal_log<propto__>(alpha, 0, 5));
            current_statement_begin__ = 79;
            lp_accum__.add(normal_log<propto__>(z, 0, 1));
            current_statement_begin__ = 80;
            for (int i = 1; i <= sum(g_per_ff); ++i) {

                current_statement_begin__ = 81;
                lp_accum__.add(gamma_log<propto__>(get_base1(sig_beta, i, "sig_beta", 1), 1.5, 3));
            }
            current_statement_begin__ = 83;
            for (int i = 1; i <= max(p_groups); ++i) {

                current_statement_begin__ = 85;
                lp_accum__.add(beta_log<propto__>(get_base1(phi, i, "phi", 1), 2, 2));
            }
            current_statement_begin__ = 87;
            lp_accum__.add(normal_log<propto__>(ze, 0, 1));
            current_statement_begin__ = 88;
            lp_accum__.add(gamma_log<propto__>(sig_obs, 1.5, 3));
            current_statement_begin__ = 89;
            lp_accum__.add(gamma_log<propto__>(sig_proc, 1.5, 3));
            current_statement_begin__ = 91;
            lp_accum__.add(lognormal_log<propto__>(y_pred, ly_pred, sig_obs));
            current_statement_begin__ = 92;
            lp_accum__.add(poisson_log<propto__>(y, y_pred));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("z");
        names__.push_back("phi");
        names__.push_back("sig_beta");
        names__.push_back("ze");
        names__.push_back("sig_proc");
        names__.push_back("sig_obs");
        names__.push_back("y_pred");
        names__.push_back("beta");
        names__.push_back("ly_pred");
        names__.push_back("log_lik");
        names__.push_back("log_lik_sum");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_coef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(lev_per_g));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(max(p_groups));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(g_per_ff));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((n_obs - n_ts));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ts);
        dims__.push_back(n_coef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_armm_ss_lnp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        std::vector<double> alpha;
        size_t alpha_d_0_max__ = n_coef;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_constrain());
        }
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }

        std::vector<double> z;
        size_t z_d_0_max__ = sum(lev_per_g);
        z.reserve(z_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < z_d_0_max__; ++d_0__) {
            z.push_back(in__.scalar_constrain());
        }
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            vars__.push_back(z[k_0__]);
        }

        std::vector<double> phi;
        size_t phi_d_0_max__ = max(p_groups);
        phi.reserve(phi_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < phi_d_0_max__; ++d_0__) {
            phi.push_back(in__.scalar_lub_constrain(0, 1));
        }
        size_t phi_k_0_max__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            vars__.push_back(phi[k_0__]);
        }

        std::vector<double> sig_beta;
        size_t sig_beta_d_0_max__ = sum(g_per_ff);
        sig_beta.reserve(sig_beta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sig_beta_d_0_max__; ++d_0__) {
            sig_beta.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            vars__.push_back(sig_beta[k_0__]);
        }

        std::vector<double> ze;
        size_t ze_d_0_max__ = (n_obs - n_ts);
        ze.reserve(ze_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < ze_d_0_max__; ++d_0__) {
            ze.push_back(in__.scalar_constrain());
        }
        size_t ze_k_0_max__ = (n_obs - n_ts);
        for (size_t k_0__ = 0; k_0__ < ze_k_0_max__; ++k_0__) {
            vars__.push_back(ze[k_0__]);
        }

        double sig_proc = in__.scalar_lb_constrain(0);
        vars__.push_back(sig_proc);

        double sig_obs = in__.scalar_lb_constrain(0);
        vars__.push_back(sig_obs);

        std::vector<double> y_pred;
        size_t y_pred_d_0_max__ = n_obs;
        y_pred.reserve(y_pred_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < y_pred_d_0_max__; ++d_0__) {
            y_pred.push_back(in__.scalar_lb_constrain(0));
        }
        size_t y_pred_k_0_max__ = n_obs;
        for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
            vars__.push_back(y_pred[k_0__]);
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 31;
            validate_non_negative_index("beta", "n_ts", n_ts);
            validate_non_negative_index("beta", "n_coef", n_coef);
            std::vector<std::vector<double> > beta(n_ts, std::vector<double>(n_coef, double(0)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            current_statement_begin__ = 32;
            validate_non_negative_index("ly_pred", "n_obs", n_obs);
            std::vector<double> ly_pred(n_obs, double(0));
            stan::math::initialize(ly_pred, DUMMY_VAR__);
            stan::math::fill(ly_pred, DUMMY_VAR__);

            // do transformed parameters statements
            {
            current_statement_begin__ = 34;
            int xy_pos(0);
            (void) xy_pos;  // dummy to suppress unused var warning
            stan::math::fill(xy_pos, std::numeric_limits<int>::min());
            stan::math::assign(xy_pos,1);


            current_statement_begin__ = 36;
            for (int ts = 1; ts <= n_ts; ++ts) {
                {
                current_statement_begin__ = 37;
                int beta_pos(0);
                (void) beta_pos;  // dummy to suppress unused var warning
                stan::math::fill(beta_pos, std::numeric_limits<int>::min());
                stan::math::assign(beta_pos,1);


                current_statement_begin__ = 39;
                for (int c = 1; c <= n_coef; ++c) {

                    current_statement_begin__ = 40;
                    if (as_bool(logical_eq(get_base1(g_per_ff, c, "g_per_ff", 1), 0))) {

                        current_statement_begin__ = 41;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(alpha, c, "alpha", 1), 
                                    "assigning variable beta");
                    } else {
                        {
                        current_statement_begin__ = 43;
                        validate_non_negative_index("sigs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > sigs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(sigs, DUMMY_VAR__);
                        stan::math::fill(sigs, DUMMY_VAR__);

                        current_statement_begin__ = 44;
                        validate_non_negative_index("zs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > zs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(zs, DUMMY_VAR__);
                        stan::math::fill(zs, DUMMY_VAR__);


                        current_statement_begin__ = 46;
                        for (int i = beta_pos; i <= ((beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)) - 1); ++i) {

                            current_statement_begin__ = 47;
                            stan::model::assign(sigs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(sig_beta, i, "sig_beta", 1), 
                                        "assigning variable sigs");
                            current_statement_begin__ = 48;
                            stan::model::assign(zs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(z, get_base1(get_base1(b_groups, ts, "b_groups", 1), i, "b_groups", 2), "z", 1), 
                                        "assigning variable zs");
                        }
                        current_statement_begin__ = 51;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(alpha, c, "alpha", 1) + dot_product(sigs, zs)), 
                                    "assigning variable beta");
                        current_statement_begin__ = 52;
                        stan::math::assign(beta_pos, (beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)));
                        }
                    }
                }
                current_statement_begin__ = 56;
                if (as_bool(logical_eq(change, 1))) {

                    current_statement_begin__ = 57;
                    stan::model::assign(ly_pred, 
                                stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable ly_pred");
                    current_statement_begin__ = 58;
                    for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                        current_statement_begin__ = 59;
                        stan::model::assign(ly_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    ((dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi, get_base1(p_groups, ts, "p_groups", 1), "phi", 1), (get_base1(time, t, "time", 1) - get_base1(time, (t - 1), "time", 1))) * get_base1(ly_pred, (t - 1), "ly_pred", 1))) + (sig_proc * get_base1(ze, (t - ts), "ze", 1))), 
                                    "assigning variable ly_pred");
                    }
                } else {

                    current_statement_begin__ = 64;
                    stan::model::assign(ly_pred, 
                                stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable ly_pred");
                    current_statement_begin__ = 65;
                    for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                        current_statement_begin__ = 66;
                        stan::model::assign(ly_pred, 
                                    stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                    ((dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi, get_base1(p_groups, ts, "p_groups", 1), "phi", 1), (get_base1(time, t, "time", 1) - get_base1(time, (t - 1), "time", 1))) * (get_base1(ly_pred, (t - 1), "ly_pred", 1) - dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"))))) + (sig_proc * get_base1(ze, (t - ts), "ze", 1))), 
                                    "assigning variable ly_pred");
                    }
                }
                current_statement_begin__ = 72;
                stan::math::assign(xy_pos, (xy_pos + get_base1(obs_per, ts, "obs_per", 1)));
                }
            }
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t beta_k_0_max__ = n_ts;
                size_t beta_k_1_max__ = n_coef;
                for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                        vars__.push_back(beta[k_0__][k_1__]);
                    }
                }
                size_t ly_pred_k_0_max__ = n_obs;
                for (size_t k_0__ = 0; k_0__ < ly_pred_k_0_max__; ++k_0__) {
                    vars__.push_back(ly_pred[k_0__]);
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 95;
            validate_non_negative_index("log_lik", "n_obs", n_obs);
            std::vector<double> log_lik(n_obs, double(0));
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);

            current_statement_begin__ = 96;
            double log_lik_sum;
            (void) log_lik_sum;  // dummy to suppress unused var warning
            stan::math::initialize(log_lik_sum, DUMMY_VAR__);
            stan::math::fill(log_lik_sum, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 97;
            for (int i = 1; i <= n_obs; ++i) {

                current_statement_begin__ = 98;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (poisson_log(get_base1(y, i, "y", 1), get_base1(y_pred, i, "y_pred", 1)) + lognormal_log(get_base1(y_pred, i, "y_pred", 1), get_base1(ly_pred, i, "ly_pred", 1), sig_obs)), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 101;
            stan::math::assign(log_lik_sum, sum(log_lik));

            // validate, write generated quantities
            current_statement_begin__ = 95;
            size_t log_lik_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                vars__.push_back(log_lik[k_0__]);
            }

            current_statement_begin__ = 96;
            vars__.push_back(log_lik_sum);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "model_armm_ss_lnp";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sig_beta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ze_k_0_max__ = (n_obs - n_ts);
        for (size_t k_0__ = 0; k_0__ < ze_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ze" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_proc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_obs";
        param_names__.push_back(param_name_stream__.str());
        size_t y_pred_k_0_max__ = n_obs;
        for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t beta_k_0_max__ = n_ts;
            size_t beta_k_1_max__ = n_coef;
            for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t ly_pred_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < ly_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ly_pred" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_k_0_max__ = n_obs;
        for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik_sum";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_k_0_max__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < phi_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sig_beta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t ze_k_0_max__ = (n_obs - n_ts);
        for (size_t k_0__ = 0; k_0__ < ze_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ze" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_proc";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_obs";
        param_names__.push_back(param_name_stream__.str());
        size_t y_pred_k_0_max__ = n_obs;
        for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t beta_k_0_max__ = n_ts;
            size_t beta_k_1_max__ = n_coef;
            for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t ly_pred_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < ly_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "ly_pred" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_k_0_max__ = n_obs;
        for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik_sum";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}  // namespace



#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


// Code generated by Stan version 2.21.0

#include <stan/model/model_header.hpp>

namespace model_mm_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_mm");
    reader.add_event(76, 74, "end", "model_mm");
    return reader;
}

class model_mm
  : public stan::model::model_base_crtp<model_mm> {
private:
        int n_obs;
        int n_ts;
        std::vector<int> obs_per;
        int n_coef;
        std::vector<int> g_per_ff;
        std::vector<int> lev_per_g;
        std::vector<std::vector<int> > b_groups;
        std::vector<int> p_groups;
        std::vector<double> y;
        std::vector<std::vector<double> > x;
        std::vector<double> time;
        double p_bound;
public:
    model_mm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_mm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_mm_namespace::model_mm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec());
            n_obs = int(0);
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            n_obs = vals_i__[pos__++];

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_ts", "int", context__.to_vec());
            n_ts = int(0);
            vals_i__ = context__.vals_i("n_ts");
            pos__ = 0;
            n_ts = vals_i__[pos__++];

            current_statement_begin__ = 5;
            validate_non_negative_index("obs_per", "n_ts", n_ts);
            context__.validate_dims("data initialization", "obs_per", "int", context__.to_vec(n_ts));
            obs_per = std::vector<int>(n_ts, int(0));
            vals_i__ = context__.vals_i("obs_per");
            pos__ = 0;
            size_t obs_per_k_0_max__ = n_ts;
            for (size_t k_0__ = 0; k_0__ < obs_per_k_0_max__; ++k_0__) {
                obs_per[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_coef", "int", context__.to_vec());
            n_coef = int(0);
            vals_i__ = context__.vals_i("n_coef");
            pos__ = 0;
            n_coef = vals_i__[pos__++];

            current_statement_begin__ = 7;
            validate_non_negative_index("g_per_ff", "n_coef", n_coef);
            context__.validate_dims("data initialization", "g_per_ff", "int", context__.to_vec(n_coef));
            g_per_ff = std::vector<int>(n_coef, int(0));
            vals_i__ = context__.vals_i("g_per_ff");
            pos__ = 0;
            size_t g_per_ff_k_0_max__ = n_coef;
            for (size_t k_0__ = 0; k_0__ < g_per_ff_k_0_max__; ++k_0__) {
                g_per_ff[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 8;
            validate_non_negative_index("lev_per_g", "sum(g_per_ff)", sum(g_per_ff));
            context__.validate_dims("data initialization", "lev_per_g", "int", context__.to_vec(sum(g_per_ff)));
            lev_per_g = std::vector<int>(sum(g_per_ff), int(0));
            vals_i__ = context__.vals_i("lev_per_g");
            pos__ = 0;
            size_t lev_per_g_k_0_max__ = sum(g_per_ff);
            for (size_t k_0__ = 0; k_0__ < lev_per_g_k_0_max__; ++k_0__) {
                lev_per_g[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("b_groups", "n_ts", n_ts);
            validate_non_negative_index("b_groups", "sum(g_per_ff)", sum(g_per_ff));
            context__.validate_dims("data initialization", "b_groups", "int", context__.to_vec(n_ts,sum(g_per_ff)));
            b_groups = std::vector<std::vector<int> >(n_ts, std::vector<int>(sum(g_per_ff), int(0)));
            vals_i__ = context__.vals_i("b_groups");
            pos__ = 0;
            size_t b_groups_k_0_max__ = n_ts;
            size_t b_groups_k_1_max__ = sum(g_per_ff);
            for (size_t k_1__ = 0; k_1__ < b_groups_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < b_groups_k_0_max__; ++k_0__) {
                    b_groups[k_0__][k_1__] = vals_i__[pos__++];
                }
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("p_groups", "n_ts", n_ts);
            context__.validate_dims("data initialization", "p_groups", "int", context__.to_vec(n_ts));
            p_groups = std::vector<int>(n_ts, int(0));
            vals_i__ = context__.vals_i("p_groups");
            pos__ = 0;
            size_t p_groups_k_0_max__ = n_ts;
            for (size_t k_0__ = 0; k_0__ < p_groups_k_0_max__; ++k_0__) {
                p_groups[k_0__] = vals_i__[pos__++];
            }

            current_statement_begin__ = 12;
            validate_non_negative_index("y", "n_obs", n_obs);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(n_obs));
            y = std::vector<double>(n_obs, double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_r__[pos__++];
            }

            current_statement_begin__ = 13;
            validate_non_negative_index("x", "n_obs", n_obs);
            validate_non_negative_index("x", "n_coef", n_coef);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(n_obs,n_coef));
            x = std::vector<std::vector<double> >(n_obs, std::vector<double>(n_coef, double(0)));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_k_0_max__ = n_obs;
            size_t x_k_1_max__ = n_coef;
            for (size_t k_1__ = 0; k_1__ < x_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < x_k_0_max__; ++k_0__) {
                    x[k_0__][k_1__] = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 14;
            validate_non_negative_index("time", "n_obs", n_obs);
            context__.validate_dims("data initialization", "time", "double", context__.to_vec(n_obs));
            time = std::vector<double>(n_obs, double(0));
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < time_k_0_max__; ++k_0__) {
                time[k_0__] = vals_r__[pos__++];
            }
            size_t time_i_0_max__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < time_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "time[i_0__]", time[i_0__], 0);
            }

            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "p_bound", "double", context__.to_vec());
            p_bound = double(0);
            vals_r__ = context__.vals_r("p_bound");
            pos__ = 0;
            p_bound = vals_r__[pos__++];
            check_greater_or_equal(function__, "p_bound", p_bound, 0);


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 18;
            validate_non_negative_index("alpha", "n_coef", n_coef);
            num_params_r__ += (1 * n_coef);
            current_statement_begin__ = 19;
            validate_non_negative_index("z", "sum(lev_per_g)", sum(lev_per_g));
            num_params_r__ += (1 * sum(lev_per_g));
            current_statement_begin__ = 20;
            validate_non_negative_index("sig_beta", "sum(g_per_ff)", sum(g_per_ff));
            num_params_r__ += (1 * sum(g_per_ff));
            current_statement_begin__ = 21;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_mm() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 18;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "n_coef", n_coef);
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec(n_coef));
        std::vector<double> alpha(n_coef, double(0));
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            alpha[k_0__] = vals_r__[pos__++];
        }
        size_t alpha_i_0_max__ = n_coef;
        for (size_t i_0__ = 0; i_0__ < alpha_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(alpha[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 19;
        if (!(context__.contains_r("z")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "sum(lev_per_g)", sum(lev_per_g));
        context__.validate_dims("parameter initialization", "z", "double", context__.to_vec(sum(lev_per_g)));
        std::vector<double> z(sum(lev_per_g), double(0));
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            z[k_0__] = vals_r__[pos__++];
        }
        size_t z_i_0_max__ = sum(lev_per_g);
        for (size_t i_0__ = 0; i_0__ < z_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_unconstrain(z[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 20;
        if (!(context__.contains_r("sig_beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sig_beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sig_beta");
        pos__ = 0U;
        validate_non_negative_index("sig_beta", "sum(g_per_ff)", sum(g_per_ff));
        context__.validate_dims("parameter initialization", "sig_beta", "double", context__.to_vec(sum(g_per_ff)));
        std::vector<double> sig_beta(sum(g_per_ff), double(0));
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            sig_beta[k_0__] = vals_r__[pos__++];
        }
        size_t sig_beta_i_0_max__ = sum(g_per_ff);
        for (size_t i_0__ = 0; i_0__ < sig_beta_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lb_unconstrain(0, sig_beta[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sig_beta: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }

        current_statement_begin__ = 21;
        if (!(context__.contains_r("sig_res")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sig_res missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sig_res");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sig_res", "double", context__.to_vec());
        double sig_res(0);
        sig_res = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sig_res);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sig_res: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 18;
            std::vector<local_scalar_t__> alpha;
            size_t alpha_d_0_max__ = n_coef;
            alpha.reserve(alpha_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_constrain(lp__));
                else
                    alpha.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 19;
            std::vector<local_scalar_t__> z;
            size_t z_d_0_max__ = sum(lev_per_g);
            z.reserve(z_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < z_d_0_max__; ++d_0__) {
                if (jacobian__)
                    z.push_back(in__.scalar_constrain(lp__));
                else
                    z.push_back(in__.scalar_constrain());
            }

            current_statement_begin__ = 20;
            std::vector<local_scalar_t__> sig_beta;
            size_t sig_beta_d_0_max__ = sum(g_per_ff);
            sig_beta.reserve(sig_beta_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < sig_beta_d_0_max__; ++d_0__) {
                if (jacobian__)
                    sig_beta.push_back(in__.scalar_lb_constrain(0, lp__));
                else
                    sig_beta.push_back(in__.scalar_lb_constrain(0));
            }

            current_statement_begin__ = 21;
            local_scalar_t__ sig_res;
            (void) sig_res;  // dummy to suppress unused var warning
            if (jacobian__)
                sig_res = in__.scalar_lb_constrain(0, lp__);
            else
                sig_res = in__.scalar_lb_constrain(0);

            // transformed parameters
            current_statement_begin__ = 24;
            validate_non_negative_index("beta", "n_ts", n_ts);
            validate_non_negative_index("beta", "n_coef", n_coef);
            std::vector<std::vector<local_scalar_t__> > beta(n_ts, std::vector<local_scalar_t__>(n_coef, local_scalar_t__(0)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            current_statement_begin__ = 25;
            validate_non_negative_index("y_pred", "n_obs", n_obs);
            std::vector<local_scalar_t__> y_pred(n_obs, local_scalar_t__(0));
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred, DUMMY_VAR__);

            // transformed parameters block statements
            {
            current_statement_begin__ = 27;
            int xy_pos(0);
            (void) xy_pos;  // dummy to suppress unused var warning
            stan::math::fill(xy_pos, std::numeric_limits<int>::min());
            stan::math::assign(xy_pos,1);


            current_statement_begin__ = 29;
            for (int ts = 1; ts <= n_ts; ++ts) {
                {
                current_statement_begin__ = 30;
                int beta_pos(0);
                (void) beta_pos;  // dummy to suppress unused var warning
                stan::math::fill(beta_pos, std::numeric_limits<int>::min());
                stan::math::assign(beta_pos,1);


                current_statement_begin__ = 32;
                for (int c = 1; c <= n_coef; ++c) {

                    current_statement_begin__ = 33;
                    if (as_bool(logical_eq(get_base1(g_per_ff, c, "g_per_ff", 1), 0))) {

                        current_statement_begin__ = 34;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(alpha, c, "alpha", 1), 
                                    "assigning variable beta");
                    } else {
                        {
                        current_statement_begin__ = 36;
                        validate_non_negative_index("sigs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > sigs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(sigs, DUMMY_VAR__);
                        stan::math::fill(sigs, DUMMY_VAR__);

                        current_statement_begin__ = 37;
                        validate_non_negative_index("zs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > zs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(zs, DUMMY_VAR__);
                        stan::math::fill(zs, DUMMY_VAR__);


                        current_statement_begin__ = 39;
                        for (int i = beta_pos; i <= ((beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)) - 1); ++i) {

                            current_statement_begin__ = 40;
                            stan::model::assign(sigs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(sig_beta, i, "sig_beta", 1), 
                                        "assigning variable sigs");
                            current_statement_begin__ = 41;
                            stan::model::assign(zs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(z, get_base1(get_base1(b_groups, ts, "b_groups", 1), i, "b_groups", 2), "z", 1), 
                                        "assigning variable zs");
                        }
                        current_statement_begin__ = 44;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(alpha, c, "alpha", 1) + dot_product(sigs, zs)), 
                                    "assigning variable beta");
                        current_statement_begin__ = 45;
                        stan::math::assign(beta_pos, (beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)));
                        }
                    }
                }
                current_statement_begin__ = 49;
                for (int t = xy_pos; t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                    current_statement_begin__ = 50;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable y_pred");
                }
                current_statement_begin__ = 52;
                stan::math::assign(xy_pos, (xy_pos + get_base1(obs_per, ts, "obs_per", 1)));
                }
            }
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 24;
            size_t beta_k_0_max__ = n_ts;
            size_t beta_k_1_max__ = n_coef;
            for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                    if (stan::math::is_uninitialized(beta[k_0__][k_1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << "[" << k_0__ << "]" << "[" << k_1__ << "]";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 25;
            size_t y_pred_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(y_pred[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: y_pred" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable y_pred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 58;
            lp_accum__.add(normal_log<propto__>(alpha, 0, 1));
            current_statement_begin__ = 59;
            lp_accum__.add(normal_log<propto__>(z, 0, 1));
            current_statement_begin__ = 60;
            for (int i = 1; i <= sum(g_per_ff); ++i) {

                current_statement_begin__ = 61;
                lp_accum__.add(gamma_log<propto__>(get_base1(sig_beta, i, "sig_beta", 1), 1.5, 3));
            }
            current_statement_begin__ = 63;
            lp_accum__.add(gamma_log<propto__>(sig_res, 1.5, 3));
            current_statement_begin__ = 65;
            lp_accum__.add(normal_log<propto__>(y, y_pred, sig_res));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("z");
        names__.push_back("sig_beta");
        names__.push_back("sig_res");
        names__.push_back("beta");
        names__.push_back("y_pred");
        names__.push_back("log_lik");
        names__.push_back("log_lik_sum");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_coef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(lev_per_g));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(g_per_ff));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ts);
        dims__.push_back(n_coef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_mm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        std::vector<double> alpha;
        size_t alpha_d_0_max__ = n_coef;
        alpha.reserve(alpha_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < alpha_d_0_max__; ++d_0__) {
            alpha.push_back(in__.scalar_constrain());
        }
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
        }

        std::vector<double> z;
        size_t z_d_0_max__ = sum(lev_per_g);
        z.reserve(z_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < z_d_0_max__; ++d_0__) {
            z.push_back(in__.scalar_constrain());
        }
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            vars__.push_back(z[k_0__]);
        }

        std::vector<double> sig_beta;
        size_t sig_beta_d_0_max__ = sum(g_per_ff);
        sig_beta.reserve(sig_beta_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < sig_beta_d_0_max__; ++d_0__) {
            sig_beta.push_back(in__.scalar_lb_constrain(0));
        }
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            vars__.push_back(sig_beta[k_0__]);
        }

        double sig_res = in__.scalar_lb_constrain(0);
        vars__.push_back(sig_res);

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 24;
            validate_non_negative_index("beta", "n_ts", n_ts);
            validate_non_negative_index("beta", "n_coef", n_coef);
            std::vector<std::vector<double> > beta(n_ts, std::vector<double>(n_coef, double(0)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);

            current_statement_begin__ = 25;
            validate_non_negative_index("y_pred", "n_obs", n_obs);
            std::vector<double> y_pred(n_obs, double(0));
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred, DUMMY_VAR__);

            // do transformed parameters statements
            {
            current_statement_begin__ = 27;
            int xy_pos(0);
            (void) xy_pos;  // dummy to suppress unused var warning
            stan::math::fill(xy_pos, std::numeric_limits<int>::min());
            stan::math::assign(xy_pos,1);


            current_statement_begin__ = 29;
            for (int ts = 1; ts <= n_ts; ++ts) {
                {
                current_statement_begin__ = 30;
                int beta_pos(0);
                (void) beta_pos;  // dummy to suppress unused var warning
                stan::math::fill(beta_pos, std::numeric_limits<int>::min());
                stan::math::assign(beta_pos,1);


                current_statement_begin__ = 32;
                for (int c = 1; c <= n_coef; ++c) {

                    current_statement_begin__ = 33;
                    if (as_bool(logical_eq(get_base1(g_per_ff, c, "g_per_ff", 1), 0))) {

                        current_statement_begin__ = 34;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(alpha, c, "alpha", 1), 
                                    "assigning variable beta");
                    } else {
                        {
                        current_statement_begin__ = 36;
                        validate_non_negative_index("sigs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > sigs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(sigs, DUMMY_VAR__);
                        stan::math::fill(sigs, DUMMY_VAR__);

                        current_statement_begin__ = 37;
                        validate_non_negative_index("zs", "get_base1(g_per_ff, c, \"g_per_ff\", 1)", get_base1(g_per_ff, c, "g_per_ff", 1));
                        std::vector<local_scalar_t__  > zs(get_base1(g_per_ff, c, "g_per_ff", 1), local_scalar_t__(DUMMY_VAR__));
                        stan::math::initialize(zs, DUMMY_VAR__);
                        stan::math::fill(zs, DUMMY_VAR__);


                        current_statement_begin__ = 39;
                        for (int i = beta_pos; i <= ((beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)) - 1); ++i) {

                            current_statement_begin__ = 40;
                            stan::model::assign(sigs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(sig_beta, i, "sig_beta", 1), 
                                        "assigning variable sigs");
                            current_statement_begin__ = 41;
                            stan::model::assign(zs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(z, get_base1(get_base1(b_groups, ts, "b_groups", 1), i, "b_groups", 2), "z", 1), 
                                        "assigning variable zs");
                        }
                        current_statement_begin__ = 44;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(alpha, c, "alpha", 1) + dot_product(sigs, zs)), 
                                    "assigning variable beta");
                        current_statement_begin__ = 45;
                        stan::math::assign(beta_pos, (beta_pos + get_base1(g_per_ff, c, "g_per_ff", 1)));
                        }
                    }
                }
                current_statement_begin__ = 49;
                for (int t = xy_pos; t <= ((xy_pos + get_base1(obs_per, ts, "obs_per", 1)) - 1); ++t) {

                    current_statement_begin__ = 50;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"), stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable y_pred");
                }
                current_statement_begin__ = 52;
                stan::math::assign(xy_pos, (xy_pos + get_base1(obs_per, ts, "obs_per", 1)));
                }
            }
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t beta_k_0_max__ = n_ts;
                size_t beta_k_1_max__ = n_coef;
                for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                    for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                        vars__.push_back(beta[k_0__][k_1__]);
                    }
                }
                size_t y_pred_k_0_max__ = n_obs;
                for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                    vars__.push_back(y_pred[k_0__]);
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 68;
            validate_non_negative_index("log_lik", "n_obs", n_obs);
            std::vector<double> log_lik(n_obs, double(0));
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);

            current_statement_begin__ = 69;
            double log_lik_sum;
            (void) log_lik_sum;  // dummy to suppress unused var warning
            stan::math::initialize(log_lik_sum, DUMMY_VAR__);
            stan::math::fill(log_lik_sum, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 70;
            for (int i = 1; i <= n_obs; ++i) {

                current_statement_begin__ = 71;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_log(get_base1(y, i, "y", 1), get_base1(y_pred, i, "y_pred", 1), sig_res), 
                            "assigning variable log_lik");
            }
            current_statement_begin__ = 73;
            stan::math::assign(log_lik_sum, sum(log_lik));

            // validate, write generated quantities
            current_statement_begin__ = 68;
            size_t log_lik_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
                vars__.push_back(log_lik[k_0__]);
            }

            current_statement_begin__ = 69;
            vars__.push_back(log_lik_sum);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    std::string model_name() const {
        return "model_mm";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sig_beta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_res";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t beta_k_0_max__ = n_ts;
            size_t beta_k_1_max__ = n_coef;
            for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t y_pred_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_k_0_max__ = n_obs;
        for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik_sum";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t alpha_k_0_max__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < alpha_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_k_0_max__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < z_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t sig_beta_k_0_max__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < sig_beta_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sig_beta" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_res";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t beta_k_0_max__ = n_ts;
            size_t beta_k_1_max__ = n_coef;
            for (size_t k_1__ = 0; k_1__ < beta_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ + 1 << '.' << k_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t y_pred_k_0_max__ = n_obs;
            for (size_t k_0__ = 0; k_0__ < y_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t log_lik_k_0_max__ = n_obs;
        for (size_t k_0__ = 0; k_0__ < log_lik_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "log_lik_sum";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}  // namespace



#ifndef USING_R

stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

#endif


#endif
