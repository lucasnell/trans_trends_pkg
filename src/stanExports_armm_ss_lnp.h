// Generated by rstantools.  Do not edit by hand.

/*
    TransTrendsPkg is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    TransTrendsPkg is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with TransTrendsPkg.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_armm_ss_lnp_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 98> locations_array__ =
  {" (found before start of program)",
  " (in 'armm_ss_lnp', line 21, column 4 to column 23)",
  " (in 'armm_ss_lnp', line 22, column 4 to column 27)",
  " (in 'armm_ss_lnp', line 24, column 4 to column 46)",
  " (in 'armm_ss_lnp', line 25, column 4 to column 42)",
  " (in 'armm_ss_lnp', line 26, column 4 to column 26)",
  " (in 'armm_ss_lnp', line 27, column 4 to column 27)",
  " (in 'armm_ss_lnp', line 28, column 4 to column 26)",
  " (in 'armm_ss_lnp', line 29, column 4 to column 32)",
  " (in 'armm_ss_lnp', line 32, column 4 to column 27)",
  " (in 'armm_ss_lnp', line 33, column 4 to column 24)",
  " (in 'armm_ss_lnp', line 98, column 2 to column 22)",
  " (in 'armm_ss_lnp', line 99, column 2 to column 19)",
  " (in 'armm_ss_lnp', line 35, column 8 to column 23)",
  " (in 'armm_ss_lnp', line 38, column 12 to column 29)",
  " (in 'armm_ss_lnp', line 44, column 30 to column 41)",
  " (in 'armm_ss_lnp', line 44, column 20 to column 43)",
  " (in 'armm_ss_lnp', line 45, column 28 to column 39)",
  " (in 'armm_ss_lnp', line 45, column 20 to column 41)",
  " (in 'armm_ss_lnp', line 48, column 24 to column 61)",
  " (in 'armm_ss_lnp', line 49, column 24 to column 66)",
  " (in 'armm_ss_lnp', line 47, column 67 to line 50, column 21)",
  " (in 'armm_ss_lnp', line 47, column 20 to line 50, column 21)",
  " (in 'armm_ss_lnp', line 52, column 20 to column 66)",
  " (in 'armm_ss_lnp', line 53, column 20 to column 44)",
  " (in 'armm_ss_lnp', line 43, column 23 to line 54, column 17)",
  " (in 'armm_ss_lnp', line 42, column 20 to column 42)",
  " (in 'armm_ss_lnp', line 41, column 35 to line 43, column 17)",
  " (in 'armm_ss_lnp', line 41, column 16 to line 54, column 17)",
  " (in 'armm_ss_lnp', line 40, column 31 to line 55, column 13)",
  " (in 'armm_ss_lnp', line 40, column 12 to line 55, column 13)",
  " (in 'armm_ss_lnp', line 66, column 16 to column 69)",
  " (in 'armm_ss_lnp', line 68, column 20 to line 72, column 46)",
  " (in 'armm_ss_lnp', line 67, column 67 to line 73, column 17)",
  " (in 'armm_ss_lnp', line 67, column 16 to line 73, column 17)",
  " (in 'armm_ss_lnp', line 65, column 19 to line 74, column 13)",
  " (in 'armm_ss_lnp', line 58, column 16 to column 69)",
  " (in 'armm_ss_lnp', line 60, column 20 to line 63, column 46)",
  " (in 'armm_ss_lnp', line 59, column 67 to line 64, column 17)",
  " (in 'armm_ss_lnp', line 59, column 16 to line 64, column 17)",
  " (in 'armm_ss_lnp', line 57, column 29 to line 65, column 13)",
  " (in 'armm_ss_lnp', line 57, column 12 to line 74, column 13)",
  " (in 'armm_ss_lnp', line 75, column 11 to column 33)",
  " (in 'armm_ss_lnp', line 37, column 26 to line 76, column 9)",
  " (in 'armm_ss_lnp', line 37, column 8 to line 76, column 9)",
  " (in 'armm_ss_lnp', line 34, column 4 to line 77, column 5)",
  " (in 'armm_ss_lnp', line 101, column 4 to line 102, column 66)",
  " (in 'armm_ss_lnp', line 100, column 19 to line 103, column 3)",
  " (in 'armm_ss_lnp', line 100, column 2 to line 103, column 3)",
  " (in 'armm_ss_lnp', line 104, column 2 to column 29)",
  " (in 'armm_ss_lnp', line 81, column 4 to column 25)",
  " (in 'armm_ss_lnp', line 82, column 4 to column 21)",
  " (in 'armm_ss_lnp', line 84, column 8 to column 36)",
  " (in 'armm_ss_lnp', line 83, column 30 to line 85, column 5)",
  " (in 'armm_ss_lnp', line 83, column 4 to line 85, column 5)",
  " (in 'armm_ss_lnp', line 88, column 8 to column 28)",
  " (in 'armm_ss_lnp', line 86, column 30 to line 89, column 5)",
  " (in 'armm_ss_lnp', line 86, column 4 to line 89, column 5)",
  " (in 'armm_ss_lnp', line 90, column 4 to column 22)",
  " (in 'armm_ss_lnp', line 91, column 4 to column 28)",
  " (in 'armm_ss_lnp', line 92, column 4 to column 29)",
  " (in 'armm_ss_lnp', line 94, column 4 to column 41)",
  " (in 'armm_ss_lnp', line 95, column 4 to column 24)",
  " (in 'armm_ss_lnp', line 3, column 4 to column 14)",
  " (in 'armm_ss_lnp', line 4, column 4 to column 13)",
  " (in 'armm_ss_lnp', line 5, column 16 to column 20)",
  " (in 'armm_ss_lnp', line 5, column 4 to column 22)",
  " (in 'armm_ss_lnp', line 6, column 4 to column 15)",
  " (in 'armm_ss_lnp', line 7, column 17 to column 23)",
  " (in 'armm_ss_lnp', line 7, column 4 to column 25)",
  " (in 'armm_ss_lnp', line 8, column 18 to column 31)",
  " (in 'armm_ss_lnp', line 8, column 4 to column 33)",
  " (in 'armm_ss_lnp', line 9, column 17 to column 21)",
  " (in 'armm_ss_lnp', line 9, column 23 to column 36)",
  " (in 'armm_ss_lnp', line 9, column 4 to column 38)",
  " (in 'armm_ss_lnp', line 10, column 17 to column 21)",
  " (in 'armm_ss_lnp', line 10, column 4 to column 23)",
  " (in 'armm_ss_lnp', line 11, column 4 to column 33)",
  " (in 'armm_ss_lnp', line 14, column 10 to column 15)",
  " (in 'armm_ss_lnp', line 14, column 4 to column 17)",
  " (in 'armm_ss_lnp', line 15, column 11 to column 16)",
  " (in 'armm_ss_lnp', line 15, column 18 to column 24)",
  " (in 'armm_ss_lnp', line 15, column 4 to column 26)",
  " (in 'armm_ss_lnp', line 16, column 23 to column 28)",
  " (in 'armm_ss_lnp', line 16, column 4 to column 30)",
  " (in 'armm_ss_lnp', line 17, column 4 to column 26)",
  " (in 'armm_ss_lnp', line 18, column 16 to column 21)",
  " (in 'armm_ss_lnp', line 18, column 4 to column 23)",
  " (in 'armm_ss_lnp', line 21, column 15 to column 21)",
  " (in 'armm_ss_lnp', line 22, column 11 to column 25)",
  " (in 'armm_ss_lnp', line 24, column 31 to column 44)",
  " (in 'armm_ss_lnp', line 25, column 27 to column 40)",
  " (in 'armm_ss_lnp', line 26, column 12 to column 24)",
  " (in 'armm_ss_lnp', line 29, column 25 to column 30)",
  " (in 'armm_ss_lnp', line 32, column 14 to column 18)",
  " (in 'armm_ss_lnp', line 32, column 19 to column 25)",
  " (in 'armm_ss_lnp', line 33, column 17 to column 22)",
  " (in 'armm_ss_lnp', line 98, column 15 to column 20)"};
#include <stan_meta_header.hpp>
class model_armm_ss_lnp final : public model_base_crtp<model_armm_ss_lnp> {
private:
  int n_obs;
  int n_ts;
  std::vector<int> obs_per;
  int n_coef;
  std::vector<int> g_per_ff;
  std::vector<int> lev_per_g;
  std::vector<std::vector<int>> b_groups;
  std::vector<int> p_groups;
  int change;
  std::vector<int> y;
  std::vector<std::vector<double>> x;
  std::vector<double> time;
  double p_bound;
  std::vector<double> offset;
  int z_1dim__;
  int phi_1dim__;
  int sig_beta_1dim__;
  int ze_1dim__;
public:
  ~model_armm_ss_lnp() {}
  model_armm_ss_lnp(stan::io::var_context& context__, unsigned int
                    random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_armm_ss_lnp_namespace::model_armm_ss_lnp";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 63;
      context__.validate_dims("data initialization", "n_obs", "int",
        std::vector<size_t>{});
      n_obs = std::numeric_limits<int>::min();
      current_statement__ = 63;
      n_obs = context__.vals_i("n_obs")[(1 - 1)];
      current_statement__ = 64;
      context__.validate_dims("data initialization", "n_ts", "int",
        std::vector<size_t>{});
      n_ts = std::numeric_limits<int>::min();
      current_statement__ = 64;
      n_ts = context__.vals_i("n_ts")[(1 - 1)];
      current_statement__ = 65;
      stan::math::validate_non_negative_index("obs_per", "n_ts", n_ts);
      current_statement__ = 66;
      context__.validate_dims("data initialization", "obs_per", "int",
        std::vector<size_t>{static_cast<size_t>(n_ts)});
      obs_per = std::vector<int>(n_ts, std::numeric_limits<int>::min());
      current_statement__ = 66;
      obs_per = context__.vals_i("obs_per");
      current_statement__ = 67;
      context__.validate_dims("data initialization", "n_coef", "int",
        std::vector<size_t>{});
      n_coef = std::numeric_limits<int>::min();
      current_statement__ = 67;
      n_coef = context__.vals_i("n_coef")[(1 - 1)];
      current_statement__ = 68;
      stan::math::validate_non_negative_index("g_per_ff", "n_coef", n_coef);
      current_statement__ = 69;
      context__.validate_dims("data initialization", "g_per_ff", "int",
        std::vector<size_t>{static_cast<size_t>(n_coef)});
      g_per_ff = std::vector<int>(n_coef, std::numeric_limits<int>::min());
      current_statement__ = 69;
      g_per_ff = context__.vals_i("g_per_ff");
      current_statement__ = 70;
      stan::math::validate_non_negative_index("lev_per_g", "sum(g_per_ff)",
        stan::math::sum(g_per_ff));
      current_statement__ = 71;
      context__.validate_dims("data initialization", "lev_per_g", "int",
        std::vector<size_t>{static_cast<size_t>(stan::math::sum(g_per_ff))});
      lev_per_g = std::vector<int>(stan::math::sum(g_per_ff),
                    std::numeric_limits<int>::min());
      current_statement__ = 71;
      lev_per_g = context__.vals_i("lev_per_g");
      current_statement__ = 72;
      stan::math::validate_non_negative_index("b_groups", "n_ts", n_ts);
      current_statement__ = 73;
      stan::math::validate_non_negative_index("b_groups", "sum(g_per_ff)",
        stan::math::sum(g_per_ff));
      current_statement__ = 74;
      context__.validate_dims("data initialization", "b_groups", "int",
        std::vector<size_t>{static_cast<size_t>(n_ts),
          static_cast<size_t>(stan::math::sum(g_per_ff))});
      b_groups = std::vector<std::vector<int>>(n_ts,
                   std::vector<int>(stan::math::sum(g_per_ff),
                     std::numeric_limits<int>::min()));
      {
        std::vector<int> b_groups_flat__;
        current_statement__ = 74;
        b_groups_flat__ = context__.vals_i("b_groups");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        for (int sym1__ = 1; sym1__ <= stan::math::sum(g_per_ff); ++sym1__) {
          current_statement__ = 74;
          for (int sym2__ = 1; sym2__ <= n_ts; ++sym2__) {
            current_statement__ = 74;
            stan::model::assign(b_groups, b_groups_flat__[(pos__ - 1)],
              "assigning variable b_groups", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 74;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 75;
      stan::math::validate_non_negative_index("p_groups", "n_ts", n_ts);
      current_statement__ = 76;
      context__.validate_dims("data initialization", "p_groups", "int",
        std::vector<size_t>{static_cast<size_t>(n_ts)});
      p_groups = std::vector<int>(n_ts, std::numeric_limits<int>::min());
      current_statement__ = 76;
      p_groups = context__.vals_i("p_groups");
      current_statement__ = 77;
      context__.validate_dims("data initialization", "change", "int",
        std::vector<size_t>{});
      change = std::numeric_limits<int>::min();
      current_statement__ = 77;
      change = context__.vals_i("change")[(1 - 1)];
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "change", change, 0);
      current_statement__ = 77;
      stan::math::check_less_or_equal(function__, "change", change, 1);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("y", "n_obs", n_obs);
      current_statement__ = 79;
      context__.validate_dims("data initialization", "y", "int",
        std::vector<size_t>{static_cast<size_t>(n_obs)});
      y = std::vector<int>(n_obs, std::numeric_limits<int>::min());
      current_statement__ = 79;
      y = context__.vals_i("y");
      current_statement__ = 80;
      stan::math::validate_non_negative_index("x", "n_obs", n_obs);
      current_statement__ = 81;
      stan::math::validate_non_negative_index("x", "n_coef", n_coef);
      current_statement__ = 82;
      context__.validate_dims("data initialization", "x", "double",
        std::vector<size_t>{static_cast<size_t>(n_obs),
          static_cast<size_t>(n_coef)});
      x = std::vector<std::vector<double>>(n_obs,
            std::vector<double>(n_coef,
              std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> x_flat__;
        current_statement__ = 82;
        x_flat__ = context__.vals_r("x");
        current_statement__ = 82;
        pos__ = 1;
        current_statement__ = 82;
        for (int sym1__ = 1; sym1__ <= n_coef; ++sym1__) {
          current_statement__ = 82;
          for (int sym2__ = 1; sym2__ <= n_obs; ++sym2__) {
            current_statement__ = 82;
            stan::model::assign(x, x_flat__[(pos__ - 1)],
              "assigning variable x", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 82;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 83;
      stan::math::validate_non_negative_index("time", "n_obs", n_obs);
      current_statement__ = 84;
      context__.validate_dims("data initialization", "time", "double",
        std::vector<size_t>{static_cast<size_t>(n_obs)});
      time = std::vector<double>(n_obs,
               std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 84;
      time = context__.vals_r("time");
      current_statement__ = 84;
      stan::math::check_greater_or_equal(function__, "time", time, 0);
      current_statement__ = 85;
      context__.validate_dims("data initialization", "p_bound", "double",
        std::vector<size_t>{});
      p_bound = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 85;
      p_bound = context__.vals_r("p_bound")[(1 - 1)];
      current_statement__ = 85;
      stan::math::check_greater_or_equal(function__, "p_bound", p_bound, 0);
      current_statement__ = 86;
      stan::math::validate_non_negative_index("offset", "n_obs", n_obs);
      current_statement__ = 87;
      context__.validate_dims("data initialization", "offset", "double",
        std::vector<size_t>{static_cast<size_t>(n_obs)});
      offset = std::vector<double>(n_obs,
                 std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 87;
      offset = context__.vals_r("offset");
      current_statement__ = 88;
      stan::math::validate_non_negative_index("alpha", "n_coef", n_coef);
      current_statement__ = 89;
      z_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 89;
      z_1dim__ = stan::math::sum(lev_per_g);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("z", "sum(lev_per_g)", z_1dim__);
      current_statement__ = 90;
      phi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 90;
      phi_1dim__ = stan::math::max(p_groups);
      current_statement__ = 90;
      stan::math::validate_non_negative_index("phi", "max(p_groups)",
        phi_1dim__);
      current_statement__ = 91;
      sig_beta_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 91;
      sig_beta_1dim__ = stan::math::sum(g_per_ff);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("sig_beta", "sum(g_per_ff)",
        sig_beta_1dim__);
      current_statement__ = 92;
      ze_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 92;
      ze_1dim__ = (n_obs - n_ts);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("ze", "n_obs - n_ts", ze_1dim__);
      current_statement__ = 93;
      stan::math::validate_non_negative_index("y_pred", "n_obs", n_obs);
      current_statement__ = 94;
      stan::math::validate_non_negative_index("beta", "n_ts", n_ts);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("beta", "n_coef", n_coef);
      current_statement__ = 96;
      stan::math::validate_non_negative_index("ly_pred", "n_obs", n_obs);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("log_lik", "n_obs", n_obs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = n_coef + z_1dim__ + phi_1dim__ + sig_beta_1dim__ +
      ze_1dim__ + 1 + 1 + n_obs;
  }
  inline std::string model_name() const final {
    return "model_armm_ss_lnp";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_armm_ss_lnp_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(n_coef, DUMMY_VAR__);
      current_statement__ = 1;
      alpha = in__.template read<std::vector<local_scalar_t__>>(n_coef);
      std::vector<local_scalar_t__> z =
        std::vector<local_scalar_t__>(z_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      z = in__.template read<std::vector<local_scalar_t__>>(z_1dim__);
      std::vector<local_scalar_t__> phi =
        std::vector<local_scalar_t__>(phi_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      phi = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(0, 1, lp__, phi_1dim__);
      std::vector<local_scalar_t__> sig_beta =
        std::vector<local_scalar_t__>(sig_beta_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      sig_beta = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   sig_beta_1dim__);
      std::vector<local_scalar_t__> ze =
        std::vector<local_scalar_t__>(ze_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      ze = in__.template read<std::vector<local_scalar_t__>>(ze_1dim__);
      local_scalar_t__ sig_proc = DUMMY_VAR__;
      current_statement__ = 6;
      sig_proc = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      local_scalar_t__ sig_obs = DUMMY_VAR__;
      current_statement__ = 7;
      sig_obs = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      std::vector<local_scalar_t__> y_pred =
        std::vector<local_scalar_t__>(n_obs, DUMMY_VAR__);
      current_statement__ = 8;
      y_pred = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, n_obs);
      std::vector<std::vector<local_scalar_t__>> beta =
        std::vector<std::vector<local_scalar_t__>>(n_ts,
          std::vector<local_scalar_t__>(n_coef, DUMMY_VAR__));
      std::vector<local_scalar_t__> ly_pred =
        std::vector<local_scalar_t__>(n_obs, DUMMY_VAR__);
      {
        int xy_pos = std::numeric_limits<int>::min();
        current_statement__ = 13;
        xy_pos = 1;
        current_statement__ = 44;
        for (int ts = 1; ts <= n_ts; ++ts) {
          int beta_pos = std::numeric_limits<int>::min();
          current_statement__ = 14;
          beta_pos = 1;
          current_statement__ = 30;
          for (int c = 1; c <= n_coef; ++c) {
            current_statement__ = 28;
            if (stan::math::logical_eq(
                  stan::model::rvalue(g_per_ff, "g_per_ff",
                    stan::model::index_uni(c)), 0)) {
              current_statement__ = 26;
              stan::model::assign(beta,
                stan::model::rvalue(alpha, "alpha", stan::model::index_uni(c)),
                "assigning variable beta", stan::model::index_uni(ts),
                stan::model::index_uni(c));
            } else {
              current_statement__ = 15;
              stan::math::validate_non_negative_index("sigs", "g_per_ff[c]",
                stan::model::rvalue(g_per_ff, "g_per_ff",
                  stan::model::index_uni(c)));
              std::vector<local_scalar_t__> sigs =
                std::vector<local_scalar_t__>(stan::model::rvalue(g_per_ff,
                                                "g_per_ff",
                                                stan::model::index_uni(c)),
                  DUMMY_VAR__);
              current_statement__ = 17;
              stan::math::validate_non_negative_index("zs", "g_per_ff[c]",
                stan::model::rvalue(g_per_ff, "g_per_ff",
                  stan::model::index_uni(c)));
              std::vector<local_scalar_t__> zs =
                std::vector<local_scalar_t__>(stan::model::rvalue(g_per_ff,
                                                "g_per_ff",
                                                stan::model::index_uni(c)),
                  DUMMY_VAR__);
              current_statement__ = 22;
              for (int i = beta_pos; i <= ((beta_pos +
                   stan::model::rvalue(g_per_ff, "g_per_ff",
                     stan::model::index_uni(c))) - 1); ++i) {
                current_statement__ = 19;
                stan::model::assign(sigs,
                  stan::model::rvalue(sig_beta, "sig_beta",
                    stan::model::index_uni(i)), "assigning variable sigs",
                  stan::model::index_uni(((i - beta_pos) + 1)));
                current_statement__ = 20;
                stan::model::assign(zs,
                  stan::model::rvalue(z, "z",
                    stan::model::index_uni(
                      stan::model::rvalue(b_groups, "b_groups",
                        stan::model::index_uni(ts), stan::model::index_uni(i)))),
                  "assigning variable zs",
                  stan::model::index_uni(((i - beta_pos) + 1)));
              }
              current_statement__ = 23;
              stan::model::assign(beta,
                (stan::model::rvalue(alpha, "alpha",
                   stan::model::index_uni(c)) +
                stan::math::dot_product(sigs, zs)),
                "assigning variable beta", stan::model::index_uni(ts),
                stan::model::index_uni(c));
              current_statement__ = 24;
              beta_pos = (beta_pos +
                stan::model::rvalue(g_per_ff, "g_per_ff",
                  stan::model::index_uni(c)));
            }
          }
          current_statement__ = 41;
          if (stan::math::logical_eq(change, 1)) {
            current_statement__ = 36;
            stan::model::assign(ly_pred,
              stan::math::dot_product(
                stan::model::rvalue(beta, "beta", stan::model::index_uni(ts),
                  stan::model::index_omni()),
                stan::model::rvalue(x, "x", stan::model::index_uni(xy_pos),
                  stan::model::index_omni())), "assigning variable ly_pred",
              stan::model::index_uni(xy_pos));
            current_statement__ = 39;
            for (int t = (xy_pos + 1); t <= ((xy_pos +
                 stan::model::rvalue(obs_per, "obs_per",
                   stan::model::index_uni(ts))) - 1); ++t) {
              current_statement__ = 37;
              stan::model::assign(ly_pred,
                (((stan::math::dot_product(
                     stan::model::rvalue(beta, "beta",
                       stan::model::index_uni(ts), stan::model::index_omni()),
                     stan::model::rvalue(x, "x", stan::model::index_uni(t),
                       stan::model::index_omni())) +
                (stan::math::pow(
                   stan::model::rvalue(phi, "phi",
                     stan::model::index_uni(
                       stan::model::rvalue(p_groups, "p_groups",
                         stan::model::index_uni(ts)))),
                   (stan::model::rvalue(time, "time",
                      stan::model::index_uni(t)) -
                   stan::model::rvalue(time, "time",
                     stan::model::index_uni((t - 1))))) *
                stan::model::rvalue(ly_pred, "ly_pred",
                  stan::model::index_uni((t - 1))))) +
                stan::model::rvalue(offset, "offset",
                  stan::model::index_uni(t))) + (sig_proc *
                stan::model::rvalue(ze, "ze",
                  stan::model::index_uni((t - ts))))),
                "assigning variable ly_pred", stan::model::index_uni(t));
            }
          } else {
            current_statement__ = 31;
            stan::model::assign(ly_pred,
              stan::math::dot_product(
                stan::model::rvalue(beta, "beta", stan::model::index_uni(ts),
                  stan::model::index_omni()),
                stan::model::rvalue(x, "x", stan::model::index_uni(xy_pos),
                  stan::model::index_omni())), "assigning variable ly_pred",
              stan::model::index_uni(xy_pos));
            current_statement__ = 34;
            for (int t = (xy_pos + 1); t <= ((xy_pos +
                 stan::model::rvalue(obs_per, "obs_per",
                   stan::model::index_uni(ts))) - 1); ++t) {
              current_statement__ = 32;
              stan::model::assign(ly_pred,
                (((stan::math::dot_product(
                     stan::model::rvalue(beta, "beta",
                       stan::model::index_uni(ts), stan::model::index_omni()),
                     stan::model::rvalue(x, "x", stan::model::index_uni(t),
                       stan::model::index_omni())) +
                (stan::math::pow(
                   stan::model::rvalue(phi, "phi",
                     stan::model::index_uni(
                       stan::model::rvalue(p_groups, "p_groups",
                         stan::model::index_uni(ts)))),
                   (stan::model::rvalue(time, "time",
                      stan::model::index_uni(t)) -
                   stan::model::rvalue(time, "time",
                     stan::model::index_uni((t - 1))))) *
                (stan::model::rvalue(ly_pred, "ly_pred",
                   stan::model::index_uni((t - 1))) -
                stan::math::dot_product(
                  stan::model::rvalue(beta, "beta",
                    stan::model::index_uni(ts), stan::model::index_omni()),
                  stan::model::rvalue(x, "x",
                    stan::model::index_uni((t - 1)),
                    stan::model::index_omni()))))) +
                stan::model::rvalue(offset, "offset",
                  stan::model::index_uni(t))) + (sig_proc *
                stan::model::rvalue(ze, "ze",
                  stan::model::index_uni((t - ts))))),
                "assigning variable ly_pred", stan::model::index_uni(t));
            }
          }
          current_statement__ = 42;
          xy_pos = (xy_pos +
            stan::model::rvalue(obs_per, "obs_per",
              stan::model::index_uni(ts)));
        }
      }
      {
        current_statement__ = 50;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, 0, 5));
        current_statement__ = 51;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(z, 0, 1));
        current_statement__ = 54;
        for (int i = 1; i <= stan::math::sum(g_per_ff); ++i) {
          current_statement__ = 52;
          lp_accum__.add(stan::math::gamma_lpdf<propto__>(
                           stan::model::rvalue(sig_beta, "sig_beta",
                             stan::model::index_uni(i)), 1.5, 3));
        }
        current_statement__ = 57;
        for (int i = 1; i <= stan::math::max(p_groups); ++i) {
          current_statement__ = 55;
          lp_accum__.add(stan::math::beta_lpdf<propto__>(
                           stan::model::rvalue(phi, "phi",
                             stan::model::index_uni(i)), 2, 2));
        }
        current_statement__ = 58;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(ze, 0, 1));
        current_statement__ = 59;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(sig_obs, 1.5, 3));
        current_statement__ = 60;
        lp_accum__.add(stan::math::gamma_lpdf<propto__>(sig_proc, 1.5, 3));
        current_statement__ = 61;
        lp_accum__.add(stan::math::lognormal_lpdf<propto__>(y_pred, ly_pred,
                         sig_obs));
        current_statement__ = 62;
        lp_accum__.add(stan::math::poisson_lpmf<propto__>(y, y_pred));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_armm_ss_lnp_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> alpha =
        std::vector<double>(n_coef, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha = in__.template read<std::vector<local_scalar_t__>>(n_coef);
      std::vector<double> z =
        std::vector<double>(z_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      z = in__.template read<std::vector<local_scalar_t__>>(z_1dim__);
      std::vector<double> phi =
        std::vector<double>(phi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      phi = in__.template read_constrain_lub<std::vector<local_scalar_t__>,
              jacobian__>(0, 1, lp__, phi_1dim__);
      std::vector<double> sig_beta =
        std::vector<double>(sig_beta_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      sig_beta = in__.template read_constrain_lb<
                   std::vector<local_scalar_t__>, jacobian__>(0, lp__,
                   sig_beta_1dim__);
      std::vector<double> ze =
        std::vector<double>(ze_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      ze = in__.template read<std::vector<local_scalar_t__>>(ze_1dim__);
      double sig_proc = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 6;
      sig_proc = in__.template read_constrain_lb<local_scalar_t__,
                   jacobian__>(0, lp__);
      double sig_obs = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 7;
      sig_obs = in__.template read_constrain_lb<local_scalar_t__,
                  jacobian__>(0, lp__);
      std::vector<double> y_pred =
        std::vector<double>(n_obs, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      y_pred = in__.template read_constrain_lb<std::vector<local_scalar_t__>,
                 jacobian__>(0, lp__, n_obs);
      std::vector<std::vector<double>> beta =
        std::vector<std::vector<double>>(n_ts,
          std::vector<double>(n_coef,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<double> ly_pred =
        std::vector<double>(n_obs, std::numeric_limits<double>::quiet_NaN());
      out__.write(alpha);
      out__.write(z);
      out__.write(phi);
      out__.write(sig_beta);
      out__.write(ze);
      out__.write(sig_proc);
      out__.write(sig_obs);
      out__.write(y_pred);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      {
        int xy_pos = std::numeric_limits<int>::min();
        current_statement__ = 13;
        xy_pos = 1;
        current_statement__ = 44;
        for (int ts = 1; ts <= n_ts; ++ts) {
          int beta_pos = std::numeric_limits<int>::min();
          current_statement__ = 14;
          beta_pos = 1;
          current_statement__ = 30;
          for (int c = 1; c <= n_coef; ++c) {
            current_statement__ = 28;
            if (stan::math::logical_eq(
                  stan::model::rvalue(g_per_ff, "g_per_ff",
                    stan::model::index_uni(c)), 0)) {
              current_statement__ = 26;
              stan::model::assign(beta,
                stan::model::rvalue(alpha, "alpha", stan::model::index_uni(c)),
                "assigning variable beta", stan::model::index_uni(ts),
                stan::model::index_uni(c));
            } else {
              current_statement__ = 15;
              stan::math::validate_non_negative_index("sigs", "g_per_ff[c]",
                stan::model::rvalue(g_per_ff, "g_per_ff",
                  stan::model::index_uni(c)));
              std::vector<double> sigs =
                std::vector<double>(stan::model::rvalue(g_per_ff, "g_per_ff",
                                      stan::model::index_uni(c)),
                  std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 17;
              stan::math::validate_non_negative_index("zs", "g_per_ff[c]",
                stan::model::rvalue(g_per_ff, "g_per_ff",
                  stan::model::index_uni(c)));
              std::vector<double> zs =
                std::vector<double>(stan::model::rvalue(g_per_ff, "g_per_ff",
                                      stan::model::index_uni(c)),
                  std::numeric_limits<double>::quiet_NaN());
              current_statement__ = 22;
              for (int i = beta_pos; i <= ((beta_pos +
                   stan::model::rvalue(g_per_ff, "g_per_ff",
                     stan::model::index_uni(c))) - 1); ++i) {
                current_statement__ = 19;
                stan::model::assign(sigs,
                  stan::model::rvalue(sig_beta, "sig_beta",
                    stan::model::index_uni(i)), "assigning variable sigs",
                  stan::model::index_uni(((i - beta_pos) + 1)));
                current_statement__ = 20;
                stan::model::assign(zs,
                  stan::model::rvalue(z, "z",
                    stan::model::index_uni(
                      stan::model::rvalue(b_groups, "b_groups",
                        stan::model::index_uni(ts), stan::model::index_uni(i)))),
                  "assigning variable zs",
                  stan::model::index_uni(((i - beta_pos) + 1)));
              }
              current_statement__ = 23;
              stan::model::assign(beta,
                (stan::model::rvalue(alpha, "alpha",
                   stan::model::index_uni(c)) +
                stan::math::dot_product(sigs, zs)),
                "assigning variable beta", stan::model::index_uni(ts),
                stan::model::index_uni(c));
              current_statement__ = 24;
              beta_pos = (beta_pos +
                stan::model::rvalue(g_per_ff, "g_per_ff",
                  stan::model::index_uni(c)));
            }
          }
          current_statement__ = 41;
          if (stan::math::logical_eq(change, 1)) {
            current_statement__ = 36;
            stan::model::assign(ly_pred,
              stan::math::dot_product(
                stan::model::rvalue(beta, "beta", stan::model::index_uni(ts),
                  stan::model::index_omni()),
                stan::model::rvalue(x, "x", stan::model::index_uni(xy_pos),
                  stan::model::index_omni())), "assigning variable ly_pred",
              stan::model::index_uni(xy_pos));
            current_statement__ = 39;
            for (int t = (xy_pos + 1); t <= ((xy_pos +
                 stan::model::rvalue(obs_per, "obs_per",
                   stan::model::index_uni(ts))) - 1); ++t) {
              current_statement__ = 37;
              stan::model::assign(ly_pred,
                (((stan::math::dot_product(
                     stan::model::rvalue(beta, "beta",
                       stan::model::index_uni(ts), stan::model::index_omni()),
                     stan::model::rvalue(x, "x", stan::model::index_uni(t),
                       stan::model::index_omni())) +
                (stan::math::pow(
                   stan::model::rvalue(phi, "phi",
                     stan::model::index_uni(
                       stan::model::rvalue(p_groups, "p_groups",
                         stan::model::index_uni(ts)))),
                   (stan::model::rvalue(time, "time",
                      stan::model::index_uni(t)) -
                   stan::model::rvalue(time, "time",
                     stan::model::index_uni((t - 1))))) *
                stan::model::rvalue(ly_pred, "ly_pred",
                  stan::model::index_uni((t - 1))))) +
                stan::model::rvalue(offset, "offset",
                  stan::model::index_uni(t))) + (sig_proc *
                stan::model::rvalue(ze, "ze",
                  stan::model::index_uni((t - ts))))),
                "assigning variable ly_pred", stan::model::index_uni(t));
            }
          } else {
            current_statement__ = 31;
            stan::model::assign(ly_pred,
              stan::math::dot_product(
                stan::model::rvalue(beta, "beta", stan::model::index_uni(ts),
                  stan::model::index_omni()),
                stan::model::rvalue(x, "x", stan::model::index_uni(xy_pos),
                  stan::model::index_omni())), "assigning variable ly_pred",
              stan::model::index_uni(xy_pos));
            current_statement__ = 34;
            for (int t = (xy_pos + 1); t <= ((xy_pos +
                 stan::model::rvalue(obs_per, "obs_per",
                   stan::model::index_uni(ts))) - 1); ++t) {
              current_statement__ = 32;
              stan::model::assign(ly_pred,
                (((stan::math::dot_product(
                     stan::model::rvalue(beta, "beta",
                       stan::model::index_uni(ts), stan::model::index_omni()),
                     stan::model::rvalue(x, "x", stan::model::index_uni(t),
                       stan::model::index_omni())) +
                (stan::math::pow(
                   stan::model::rvalue(phi, "phi",
                     stan::model::index_uni(
                       stan::model::rvalue(p_groups, "p_groups",
                         stan::model::index_uni(ts)))),
                   (stan::model::rvalue(time, "time",
                      stan::model::index_uni(t)) -
                   stan::model::rvalue(time, "time",
                     stan::model::index_uni((t - 1))))) *
                (stan::model::rvalue(ly_pred, "ly_pred",
                   stan::model::index_uni((t - 1))) -
                stan::math::dot_product(
                  stan::model::rvalue(beta, "beta",
                    stan::model::index_uni(ts), stan::model::index_omni()),
                  stan::model::rvalue(x, "x",
                    stan::model::index_uni((t - 1)),
                    stan::model::index_omni()))))) +
                stan::model::rvalue(offset, "offset",
                  stan::model::index_uni(t))) + (sig_proc *
                stan::model::rvalue(ze, "ze",
                  stan::model::index_uni((t - ts))))),
                "assigning variable ly_pred", stan::model::index_uni(t));
            }
          }
          current_statement__ = 42;
          xy_pos = (xy_pos +
            stan::model::rvalue(obs_per, "obs_per",
              stan::model::index_uni(ts)));
        }
      }
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n_coef; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n_ts; ++sym2__) {
            out__.write(beta[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        out__.write(ly_pred);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<double> log_lik =
        std::vector<double>(n_obs, std::numeric_limits<double>::quiet_NaN());
      double log_lik_sum = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 48;
      for (int i = 1; i <= n_obs; ++i) {
        current_statement__ = 46;
        stan::model::assign(log_lik,
          (stan::math::poisson_lpmf<false>(
             stan::model::rvalue(y, "y", stan::model::index_uni(i)),
             stan::model::rvalue(y_pred, "y_pred", stan::model::index_uni(i)))
          +
          stan::math::lognormal_lpdf<false>(
            stan::model::rvalue(y_pred, "y_pred", stan::model::index_uni(i)),
            stan::model::rvalue(ly_pred, "ly_pred", stan::model::index_uni(i)),
            sig_obs)), "assigning variable log_lik",
          stan::model::index_uni(i));
      }
      current_statement__ = 49;
      log_lik_sum = stan::math::sum(log_lik);
      out__.write(log_lik);
      out__.write(log_lik_sum);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(n_coef, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha,
        in__.read<std::vector<local_scalar_t__>>(n_coef),
        "assigning variable alpha");
      out__.write(alpha);
      std::vector<local_scalar_t__> z =
        std::vector<local_scalar_t__>(z_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(z,
        in__.read<std::vector<local_scalar_t__>>(z_1dim__),
        "assigning variable z");
      out__.write(z);
      std::vector<local_scalar_t__> phi =
        std::vector<local_scalar_t__>(phi_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(phi,
        in__.read<std::vector<local_scalar_t__>>(phi_1dim__),
        "assigning variable phi");
      out__.write_free_lub(0, 1, phi);
      std::vector<local_scalar_t__> sig_beta =
        std::vector<local_scalar_t__>(sig_beta_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(sig_beta,
        in__.read<std::vector<local_scalar_t__>>(sig_beta_1dim__),
        "assigning variable sig_beta");
      out__.write_free_lb(0, sig_beta);
      std::vector<local_scalar_t__> ze =
        std::vector<local_scalar_t__>(ze_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      stan::model::assign(ze,
        in__.read<std::vector<local_scalar_t__>>(ze_1dim__),
        "assigning variable ze");
      out__.write(ze);
      local_scalar_t__ sig_proc = DUMMY_VAR__;
      current_statement__ = 6;
      sig_proc = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sig_proc);
      local_scalar_t__ sig_obs = DUMMY_VAR__;
      current_statement__ = 7;
      sig_obs = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, sig_obs);
      std::vector<local_scalar_t__> y_pred =
        std::vector<local_scalar_t__>(n_obs, DUMMY_VAR__);
      current_statement__ = 8;
      stan::model::assign(y_pred,
        in__.read<std::vector<local_scalar_t__>>(n_obs),
        "assigning variable y_pred");
      out__.write_free_lb(0, y_pred);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{static_cast<size_t>(n_coef)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "z", "double",
        std::vector<size_t>{static_cast<size_t>(z_1dim__)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "phi", "double",
        std::vector<size_t>{static_cast<size_t>(phi_1dim__)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "sig_beta",
        "double", std::vector<size_t>{static_cast<size_t>(sig_beta_1dim__)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "ze", "double",
        std::vector<size_t>{static_cast<size_t>(ze_1dim__)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "sig_proc",
        "double", std::vector<size_t>{});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "sig_obs",
        "double", std::vector<size_t>{});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "y_pred", "double",
        std::vector<size_t>{static_cast<size_t>(n_obs)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> alpha =
        std::vector<local_scalar_t__>(n_coef, DUMMY_VAR__);
      current_statement__ = 1;
      alpha = context__.vals_r("alpha");
      out__.write(alpha);
      std::vector<local_scalar_t__> z =
        std::vector<local_scalar_t__>(z_1dim__, DUMMY_VAR__);
      current_statement__ = 2;
      z = context__.vals_r("z");
      out__.write(z);
      std::vector<local_scalar_t__> phi =
        std::vector<local_scalar_t__>(phi_1dim__, DUMMY_VAR__);
      current_statement__ = 3;
      phi = context__.vals_r("phi");
      out__.write_free_lub(0, 1, phi);
      std::vector<local_scalar_t__> sig_beta =
        std::vector<local_scalar_t__>(sig_beta_1dim__, DUMMY_VAR__);
      current_statement__ = 4;
      sig_beta = context__.vals_r("sig_beta");
      out__.write_free_lb(0, sig_beta);
      std::vector<local_scalar_t__> ze =
        std::vector<local_scalar_t__>(ze_1dim__, DUMMY_VAR__);
      current_statement__ = 5;
      ze = context__.vals_r("ze");
      out__.write(ze);
      local_scalar_t__ sig_proc = DUMMY_VAR__;
      current_statement__ = 6;
      sig_proc = context__.vals_r("sig_proc")[(1 - 1)];
      out__.write_free_lb(0, sig_proc);
      local_scalar_t__ sig_obs = DUMMY_VAR__;
      current_statement__ = 7;
      sig_obs = context__.vals_r("sig_obs")[(1 - 1)];
      out__.write_free_lb(0, sig_obs);
      std::vector<local_scalar_t__> y_pred =
        std::vector<local_scalar_t__>(n_obs, DUMMY_VAR__);
      current_statement__ = 8;
      y_pred = context__.vals_r("y_pred");
      out__.write_free_lb(0, y_pred);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha", "z", "phi", "sig_beta", "ze",
                "sig_proc", "sig_obs", "y_pred"};
    if (emit_transformed_parameters__) {
      std::vector<std::string> temp{"beta", "ly_pred"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string> temp{"log_lik", "log_lik_sum"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    n_coef)},
                std::vector<size_t>{static_cast<size_t>(z_1dim__)},
                std::vector<size_t>{static_cast<size_t>(phi_1dim__)},
                std::vector<size_t>{static_cast<size_t>(sig_beta_1dim__)},
                std::vector<size_t>{static_cast<size_t>(ze_1dim__)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(n_obs)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_ts),
               static_cast<size_t>(n_coef)},
             std::vector<size_t>{static_cast<size_t>(n_obs)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(n_obs)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_coef; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sig_beta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sig_beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ze_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "ze" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sig_proc");
    param_names__.emplace_back(std::string() + "sig_obs");
    for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_pred" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_coef; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_ts; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
        param_names__.emplace_back(std::string() + "ly_pred" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "log_lik_sum");
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= n_coef; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= z_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "z" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= phi_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "phi" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= sig_beta_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "sig_beta" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= ze_1dim__; ++sym1__) {
      param_names__.emplace_back(std::string() + "ze" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "sig_proc");
    param_names__.emplace_back(std::string() + "sig_obs");
    for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
      param_names__.emplace_back(std::string() + "y_pred" + '.' +
        std::to_string(sym1__));
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n_coef; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= n_ts; ++sym2__) {
          param_names__.emplace_back(std::string() + "beta" + '.' +
            std::to_string(sym2__) + '.' + std::to_string(sym1__));
        }
      }
      for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
        param_names__.emplace_back(std::string() + "ly_pred" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= n_obs; ++sym1__) {
        param_names__.emplace_back(std::string() + "log_lik" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "log_lik_sum");
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_coef) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(phi_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sig_beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sig_beta_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ze\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ze_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sig_proc\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sig_obs\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_obs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_ts) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_coef) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"ly_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_obs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_obs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_sum\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_coef) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(z_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(phi_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sig_beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(sig_beta_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"ze\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(ze_1dim__) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"sig_proc\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sig_obs\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"y_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_obs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_ts) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(n_coef) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"transformed_parameters\"},{\"name\":\"ly_pred\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_obs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(n_obs) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"generated_quantities\"},{\"name\":\"log_lik_sum\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((n_coef + z_1dim__) + phi_1dim__) +
      sig_beta_1dim__) + ze_1dim__) + 1) + 1) + n_obs);
    const size_t num_transformed = emit_transformed_parameters * (((n_ts *
      n_coef) + n_obs));
    const size_t num_gen_quantities = emit_generated_quantities * ((n_obs +
      1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((n_coef + z_1dim__) + phi_1dim__) +
      sig_beta_1dim__) + ze_1dim__) + 1) + 1) + n_obs);
    const size_t num_transformed = emit_transformed_parameters * (((n_ts *
      n_coef) + n_obs));
    const size_t num_gen_quantities = emit_generated_quantities * ((n_obs +
      1));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_armm_ss_lnp_namespace::model_armm_ss_lnp;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_armm_ss_lnp_namespace::profiles__;
}
#endif
#endif
